#!/usr/bin/perl -w

#
# For a description of what this script does see documentation at the
# end of this file.
#

use strict;
use Getopt::Long;
use File::Basename;
use Pod::Usage;
use Term::ReadKey;
use Data::Dumper;

my $MYSQL = "/usr/bin/mysql";
my $GREP = "/bin/grep";
my $SED = "/bin/sed";
my $DBHOST = "localhost";
my $DBUSER = "";
my $DBPWD = "";
my $RESULT = "1";
my $help = 0;
my $man = 0;

GetOptions ('host=s' => \$DBHOST,
            'user=s' => \$DBUSER,
            'password=s' => \$DBPWD,
            'man' => \$man,
            'help|?'   => \$help) or pod2usage(2);

pod2usage(1) if $help;
pod2usage(-exitstatus => 0, -verbose => 2) if $man;

if ($DBUSER eq "") {
    die "ERROR: database user name not specified\n";
}

if ($DBPWD eq "") {
    print "Enter the MySQL password for user $DBUSER: ";
    ReadMode 'noecho';
    $DBPWD = ReadLine 0;
    chomp $DBPWD;
    ReadMode 'normal';
    print "\n";
}

if ($DBPWD eq "") {
    die "ERROR: database user password not specified\n";
}

sub mysqlCmd {
    my $dbname = shift;
    my $cmd = shift;

    if (! defined($cmd)) { die "command is empty"; }
    if (! defined($dbname)) { die "database name not specified"; }
    return `$MYSQL -h$DBHOST -u$DBUSER -p$DBPWD -B --skip-column-names -e \"$cmd\" biobank`;
}

sub checkMysqlInnoDB {
    my $chk_innodb = (`$MYSQL -h$DBHOST -u$DBUSER -p$DBPWD -e "show variables" mysql |
        $GREP -e "^storage_engine"`  =~ /InnoDB/);

    print "checking MySQL for InnoDB..."
        . ($chk_innodb ? "PASS" :  "FAIL") . "\n";
    return $chk_innodb;
}

sub checkMysqlLowerCaseTableNames {
    my $lcnames = (`$MYSQL -h$DBHOST -u$DBUSER -p$DBPWD -e "show variables" mysql |
        $GREP -e "^lower_case_table_names"` =~ /1$/);
    print "checking MySQL for lower case table names..."
        . ($lcnames ? "PASS" : "FAIL") . "\n";
    return $lcnames;
}

sub checkJbossHomeEnv {
    my $env = defined($ENV{'JBOSS_HOME'}) && (-d "$ENV{'JBOSS_HOME'}");
    print "checking if JBOSS_HOME environment variable defined and valid..."
        . ($env ? "PASS" : "FAIL") . "\n";
    return $env;
}

sub checkEclipseHomeEnv {
    my $env = defined($ENV{'ECLIPSE_HOME'}) && (-d "$ENV{'ECLIPSE_HOME'}");
    print "checking if ECLIPSE_HOME environment variable defined and valid..."
        . ($env ? "PASS" : "FAIL") . "\n";
    return $env;
}

sub checkEclipseDeltaPack {
    my $present = 0;
    if (defined($ENV{'ECLIPSE_HOME'})) {
        my $path = $ENV{'ECLIPSE_HOME'}
            . "/plugins/org.eclipse.swt.win32.win32.x86.source_3.7.2.v3740f.jar";
        $present = 1 if (-f "$path");
    }
    print "checking for Eclipse delta pack..."
        . ($present ? "PASS" : "FAIL") . "\n";
    return $present;
}

sub checkKeystoreFile {
    my $present = 1 if (-f "security-logs/jboss/biobank.keystore");
    print "checking for SSL certificate file..."
        . ($present ? "PASS" : "FAIL") . "\n";
    return $present;
}

sub checkDbExists() {
    my $cmd = "SELECT SCHEMA_NAME FROM INFORMATION_SCHEMA.SCHEMATA "
        . "WHERE SCHEMA_NAME = 'biobank'";
    my $present = (mysqlCmd('biobank', $cmd) =~ /^biobank$/);
    print "checking for databse biobank..."
        . ($present ? "PASS" : "FAIL") . "\n";
    return $present;
}

sub checkDbTablesInnoDb() {
    my $cmd = "SELECT TABLE_NAME FROM information_schema.TABLES "
        . "WHERE TABLE_SCHEMA = 'biobank' AND engine = 'InnoDB'";

    my @innoTables = mysqlCmd('biobank', $cmd);
    my @tables = mysqlCmd('biobank', 'SHOW TABLES');
    my @nonInnoDbTables = ();

    #report the bad tables
    foreach (grep { not $_ ~~ @innoTables } @tables) {
        chomp($_);
        push (@nonInnoDbTables, $_);
    }

    my $valid = ($#nonInnoDbTables < 0);

    print "checking if database tables are InnoDB..."
        . ($valid ? "PASS" : "FAIL") . "\n";

    foreach (@nonInnoDbTables)  {
        print "\ttable \"$_\" is not InnoDB\n";
    }
    return $valid;
}


$RESULT &&= checkMysqlInnoDB();
$RESULT &&= checkMysqlLowerCaseTableNames();

if (checkDbExists()) {
    checkDbTablesInnoDb();
}

$RESULT &&= checkJbossHomeEnv();
$RESULT &&= checkKeystoreFile;

# optional
if (checkEclipseHomeEnv()) {
    checkEclipseDeltaPack();
}

exit !$RESULT;

__END__

=head1 NAME

chkconfig - Checks for a valid deployment configuration environment for a
Biobank server.

=head1 USAGE

chkconfig [OPTIONS]

=head1 OPTIONS

  -H DBHOST   The hostname of the machine running the MySQL server. Defaults to
              localhost if not specified.
  -u DBUSER   The user to use on the MySQL server.
  -p PWD      The password to use on the MySQL server. If not specified the
              user will be prompted to enter it.
  -help       Help text.
  -man        Full documentation.

=cut

# Local Variables:
# compile-command: "cd $HOME/proj/cbsr/biobank && scripts/chkconfig"
# End:
