AbstractPosition.col.Min=Column must be at least ${attributes.value}.
AbstractPosition.col.NotNull=Column is required.
AbstractPosition.InBounds.illegalType=Can only validate container and specimen positions. This is neither.
AbstractPosition.InBounds.outOfBounds=Position is not allowed. Row ${validatedValue.row} and column ${validatedValue.col} exceed the maximum capacity of container type '${validatedValue.holdingContainer.containerType.name}' (at most ${validatedValue.holdingContainer.containerType.rowCapacity} rows and ${validatedValue.holdingContainer.containerType.colCapacity} columns).
AbstractPosition.positionString.NotNull=Position string is required.
AbstractPosition.row.Min=Row must be at least ${attributes.value}.
AbstractPosition.row.NotNull=Row is required.
Address.city.NotEmpty=City is required.
AliquotedSpecimen.activityStatus.NotNull=Activity status is required.
AliquotedSpecimen.specimenType.NotNull=Specimen type is required.
AliquotedSpecimen.study.NotNull=Study is required.
AliquotedSpecimen.volume.Digits=Volume must have at most ${attributes.integer} digits before the decimal point and at most ${attributes.fraction} digits after the decimal point.
Capacity.colCapacity.Min=Column capacity must be at least ${attributes.value}.
Capacity.colCapacity.NotNull=Column capacity is required.
Capacity.rowCapacity.Min=Row capacity must be at least ${attributes.value}.
Capacity.rowCapacity.NotNull=Row capacity is required.
Center.activityStatus.NotNull=Activity status is required.
Center.address.NotNull=Address is required.
Center.name.NotEmpty=Name is required.
Center.nameShort.NotEmpty=Short name is required.
Site.Empty.srcDispatches=Site '${validatedValue.name}' is the sender of one or more dispatches.
Site.Empty.dstDispatches=Site '${validatedValue.name}' is the receiver of one or more dispatches.
ResearchGroup.Empty.srcDispatches=Research group '${validatedValue.name}' is the sender of one or more dispatches.
ResearchGroup.Empty.dstDispatches=Research group '${validatedValue.name}' is the receiver of one or more dispatches.
Clinic.Empty.srcDispatches=Clinic '${validatedValue.name}' is the sender of one or more dispatches.
Clinic.Empty.dstDispatches=Clinic '${validatedValue.name}' is the receiver of one or more dispatches.
Site.Unique[name]=A site with the name '${validatedValue.name}' already exists.
Site.Unique[nameShort]=A site with the short name '${validatedValue.nameShort}' already exists.
ResearchGroup.Unique[name]=A research group with the name '${validatedValue.name}' already exists.
ResearchGroup.Unique[nameShort]=A research group with the short name '${validatedValue.nameShort}' already exists.
Clinic.Unique[name]=A clinic with the name '${validatedValue.name}' already exists.
Clinic.Unique[nameShort]=A clinic with the short name '${validatedValue.nameShort}' already exists.
Clinic.NotUsed.Study.contacts.clinic=Clinic '${validatedValue.name}' is used by at least one study's contact.
Clinic.NotUsed.OriginInfo.center=Clinic '${validatedValue.name}' is involved with shipments.
CollectionEvent.activityStatus.NotNull=Activity status is required.
CollectionEvent.Empty.allSpecimens=Collection event '${validatedValue.visitNumber}' of patient '${validatedValue.patient.pnumber}' still has specimens.
CollectionEvent.patient.NotNull=Patient is required.
CollectionEvent.Unique[patient,visitNumber]=Visit number '${validatedValue.visitNumber}' already exists for patient '${validatedValue.patient.pnumber}'.
CollectionEvent.visitNumber.Min=Visit number must be at least ${attributes.value}.
CollectionEvent.visitNumber.NotNull=Visit number is required.
Comment.createdAt.NotNull=A creation time is required.
Comment.message.NotNull=Message is required.
Comment.user.NotNull=User is required.
Contact.Empty.studies=Contact '${validatedValue.name}' is still associated with studies.
Contact.name.NotNull=Name is required.
Container.activityStatus.NotNull=Activity status is required.
Container.containerType.NotNull=Container type is required.
Container.Empty.childPositions=Container '${validatedValue.label}' still has child containers.
Container.Empty.specimenPositions=Container '${validatedValue.label}' still has specimens.
Container.label.NotEmpty=Label is required.
Container.ValidContainer.illegalParent=Cannot be top level and have a parent container. Remove one.
Container.ValidContainer.illegalType=Can only validate containers. This is not a container.
Container.ValidContainer.missingParent=Missing a parent container.
ContainerPosition.container.NotNull=A container is required.
ContainerPosition.parentContainer.NotNull=A parent container is required.
ContainerPosition.Unique[parentContainer,row,col]=Container '${validatedValue.parentContainer.label}' already has a container at this position.
Container.site.NotNull=Site is required.
ContainerType.activityStatus.NotNull=Activity status is required.
ContainerType.capacity.NotNull=Capacity is required.
ContainerType.childLabelingScheme.NotNull=Child labeling scheme is required.
ContainerType.name.NotEmpty=Name is required.
ContainerType.nameShort.NotEmpty=Short name is required.
ContainerType.NotUsed.Container.containerType=Container type '${validatedValue.name}' is used by at least one container.
ContainerType.NotUsed.SpecimenPosition.container.containerType=Container type '${validatedValue.name}' is used by at least one container with specimens.
ContainerType.Empty.childContainerTypes=Container type '${validatedValue.name}' has child container types.
ContainerType.Empty.parentContainerTypes=Container type '${validatedValue.name}' has parent container types.
ContainerType.Empty.specimenTypes=Container type '${validatedValue.name}' has specimen types.
ContainerType.site.NotNull=Site is required.
ContainerType.Unique[site,name]=A container type with the name '${validatedValue.name}' already exists at the ${validatedValue.site.name} site.
ContainerType.Unique[site,nameShort]=A container type with the short name '${validatedValue.nameShort}' already exists at the ${validatedValue.site.name} site.
ContainerType.ValidContainerType.illegalChange=The capacity (maximum rows and columns), the top level option, and child labeling scheme cannot be changed as this container type is already used by specimens or containers.
ContainerType.ValidContainerType.illegalChildContainerTypeRemove=Cannot remove child container types in use by containers.
ContainerType.ValidContainerType.illegalSpecimenTypeRemove=Cannot remove specimen types in use by containers.
ContainerType.ValidContainerType.illegalType=Can only validate container types. This is not a container type.
ContainerType.ValidContainerType.multipleChildTypes=A container type may contain child specimens or containers, but not both.
ContainerType.ValidContainerType.overCapacity=Labeling scheme '${validatedValue.childLabelingScheme.name}' cannot label ${validatedValue.capacity.rowCapacity} rows and ${validatedValue.capacity.colCapacity} columns. 
Container.Unique[site,containerType,label]=A container with the type '${validatedValue.containerType.name}' and the label '${validatedValue.label}' already exists at the ${validatedValue.site.name} site.
Container.Unique[site,productBarcode]=A container with the product barcode '${validatedValue.productBarcode}' already exists at the ${validatedValue.site.name} site.
Dispatch.receiverCenter.NotNull=Receiver center is required.
Dispatch.senderCenter.NotNull=Sender center is required.
DispatchSpecimen.dispatch.NotNull=Dispatch is required.
DispatchSpecimen.specimen.NotNull=Specimen is required.
DispatchSpecimen.state.NotNull=State is required.
Dispatch.state.NotNull=State is required.
Entity.className.NotEmpty=Entity class name is required.
EntityColumn.entityProperty.NotNull=Entity property is required.
EntityColumn.name.NotEmpty=Name is required.
EntityFilter.entityProperty.NotNull=Entity property is required.
EntityFilter.name.NotEmpty=Name is required.
Entity.name.NotEmpty=Name is required.
EntityProperty.property.NotEmpty=Property is required.
EntityProperty.propertyType.NotNull=Property type is required.
EventAttr.collectionEvent.NotNull=Collection event is required.
EventAttr.studyEventAttr.NotNull=Study event attribute is required.
EventAttrType.name.NotEmpty=Name is required.
GlobalEventAttr.eventAttrType.NotNull=Event attribute type is required.
GlobalEventAttr.label.NotEmpty=Label is required.
GlobalEventAttr.Unique[label]=A global event attribute with the label '${validatedValue.label}' already exists.
Group.description.NotEmpty=Description is required.
Group.name.NotEmptyName is required.
Group.Unique[name]=A group with the name '${validatedValue.name}' already exists.
JasperTemplate.name.NotEmpty=Name is required.
JasperTemplate.Unique[name]=A jasper template with the name '${validatedValue.name}' already exists.
JasperTemplate.xml.NotEmpty=XML is required.
Membership.domain.NotNull=A domain (centers and studies) is required.
Membership.principal.NotNull=A principal (user or group) is required.
Membership.rank.NotNull=A rank is required.
OriginInfo.center.NotNull=An originating center is required.
Patient.createdAt.NotNull=A creation time is required.
Patient.Empty.collectionEvents=Patient '${validatedValue.pnumber}' still has collection events.
Patient.NotUsed.Specimen.collectionEvent.patient=Patient '${validatedValue.pnumber}' is used by at least one specimen.
Patient.pnumber.NotEmpty=Patient number is required.
Patient.study.NotNull=Study is required.
Patient.Unique[pnumber]=A patient with number '${validatedValue.pnumber}' already exists.
Principal.activityStatus.NotNull=Activity status is required.
Principal.memberships.NotEmpty=Users and groups must be created with memberships, although those memberships can be later removed.
PrintedSsInvItem.txt.NotEmpty=Text is required.
PrintedSsInvItem.Unique[txt]=An inventory item with text '${validatedValue.txt}' has already been printed.
PrinterLabelTemplate.jasperTemplate.NotNull=Jasper template is required.
PrinterLabelTemplate.name.NotEmpty=Name is required.
PrinterLabelTemplate.Unique[name]=A printer label template with name '${validatedValue.name}' already exists.
ProcessingEvent.activityStatus.NotNull=Activity status is required.
ProcessingEvent.center.NotNull=A center is required.
ProcessingEvent.createdAt.NotNull=A creation time is required.
ProcessingEvent.NotUsed.Specimen.parentSpecimen.processingEvent=Processing event '${validatedValue.worksheet}' (created ${validatedValue.createdAt}) already has derived specimens.
ProcessingEvent.NotUsed.Specimen.processingEvent=Processing event '${validatedValue.worksheet}' is used by at least one specimen.
ProcessingEvent.Unique[worksheet]=A processing event with worksheet '${validatedValue.worksheet}' already exists.
ProcessingEvent.worksheet.NotEmpty=Worksheet is required.
PropertyModifier.name.NotEmpty=Name is required.
PropertyType.name.NotEmpty=Name is required.
Report.entity.NotNull=Entity is required.
Report.name.NotEmpty=Name is required.
Request.address.NotNull=Address is required.
Request.created.NotNull=A creation time is required.
Request.researchGroup.NotNull=Research group is required.
RequestSpecimen.request.NotNull=Request is required.
RequestSpecimen.specimen.NotNull=Specimen is required.
RequestSpecimen.state.NotNull=State is required.
Request.submitted.Null=Request has already been submitted, at ${validatedValue}.
ResearchGroup.Empty.requests=Research group '${validatedValue.name}' still has requests.
Role.name.NotEmpty=Name is required.
Role.NotUsed.Membership.roles=Role '${validatedValue.name}' is used by at least one user or group's membership.
Role.Unique[name]=Name '${validatedValue.name}' is already taken.
ShipmentInfo.shippingMethod.NotNull=Shipping method is required.
ShippingMethod.name.NotEmpty=Name is required.
ShippingMethod.NotUsed.ShipmentInfo.shippingMethod=Shipping method '${validatedValue.name}' is used by at least one shipment information.
ShippingMethod.Unique[name]=A shipping method with name '${validatedValue.name}' already exists.
Site.Empty.containers=Site '${validatedValue.name}' still has containers.
Site.Empty.containerTypes=Site '${validatedValue.name}' still has containers types.
Site.Empty.processingEvents=Site '${validatedValue.name}' still has processing events.
SourceSpecimen.specimenType.NotNull=Specimen type is required.
SourceSpecimen.study.NotNull=Study is required.
Specimen.activityStatus.NotNull=Activity status is required.
Specimen.collectionEvent.NotNull=Collection event is required.
Specimen.createdAt.NotNull=Created time is required.
Specimen.currentCenter.NotNull=Current center is required.
Specimen.Empty.childSpecimens=Specimen '${validatedValue.inventoryId}' still has child specimens.
Specimen.inventoryId.NotEmpty=Inventory ID is required.
Specimen.NotUsed.DispatchSpecimen.specimen=Specimen '${validatedValue.inventoryId}' is used by at least one dispatch.
Specimen.originInfo.NotNull=Originating center is required.
SpecimenPosition.container.NotNull=Container is required.
SpecimenPosition.specimen.NotNull=Specimen is required.
SpecimenPosition.Unique[container,row,col]=Container '${validatedValue.container.label}' already has a specimen at position '${validatedValue.positionString}'.
Specimen.quantity.Digits=Quantity must have at most ${attributes.integer} digits before the decimal point and at most ${attributes.fraction} digits after the decimal point.
Specimen.specimenType.NotNull=Specimen type is required.
SpecimenType.name.NotEmpty=Name is required.
SpecimenType.nameShort.NotEmpty=Short name is required.
SpecimenType.NotUsed.AliquotedSpecimen.specimenType=Specimen type '${validatedValue.name}' is used by at least one aliquoted specimen.
SpecimenType.NotUsed.SourceSpecimen.specimenType=Specimen type '${validatedValue.name}' is used by at least one source specimen.
SpecimenType.NotUsed.Specimen.specimenType=Specimen type '${validatedValue.name}' is used by at least one specimen.
SpecimenType.Empty.childSpecimenTypes=Specimen type '${validatedValue.name}' has child specimen types.
SpecimenType.Empty.parentSpecimenTypes=Specimen type '${validatedValue.name}' has parent specimen types.
SpecimenType.Unique[name]=A specimen type with the name '${validatedValue.name}' already exists.
SpecimenType.Unique[nameShort]=A specimen type with the short name '${validatedValue.nameShort}' already exists.
Specimen.Unique[inventoryId]=A specimen with inventory ID '${validatedValue.inventoryId}' already exists.
Study.activityStatus.NotEmpty=Activity status is required.
Study.Empty.patients=Study '${validatedValue.name}' still has patients.
StudyEventAttr.activityStatus.NotNull=Activity status is required.
StudyEventAttr.globalEventAttr.NotNull=Global event attribute is required.
StudyEventAttr.NotUsed.EventAttr.studyEventAttr=Study ('${validatedValue.study.name}') event attribute '${validatedValue.globalEventAttr.label}' is used by at least one event attribute and collection event.
StudyEventAttr.study.NotNull=Study is required.
Study.name.NotEmpty=Name is required.
Study.nameShort.NotEmpty=Short name is required.
Study.Unique[name]=A study with the name '${validatedValue.name}' already exists.
Study.Unique[nameShort]=A study with the short name '${validatedValue.nameShort}' already exists.
User.csmUserId.NotNull=CSM user ID is required.
User.login.NotEmpty=Login is required.
User.Unique[csmUserId]=A user with the CSM user ID '${validatedValue.csmUserId}' already exists.
User.Unique[email]=A user with the email '${validatedValue.email}' already exists.
User.Unique[login]=A user with the login '${validatedValue.login}' already exists.
# TODO: give ContainerPosition a positionString attribute or use a function to determine it. Just displaying the row and col is not great
# TODO: it would be nice to push name/ login into principal so we can refer to it as something.
# TODO: many Report* model objects are missing validation.
# TODO: where is positionString now?
