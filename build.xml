<?xml version="1.0" encoding="utf-8"?>
<project name="biobank2" basedir="." default="deploy">

  <!--
     Overall build file
     use command "ant -projecthelp" to display the targets.
    -->
  <exec executable="hostname" outputproperty="host.name">
    <arg value="-f"/>
  </exec>

  <property name="server.version.num" value="1.3.1"/>
  <property name="java.client.version.num" value="1.3.4"/>

  <property environment="env" />
  <property name="host" value="aicml-med.cs.ualberta.ca" />
  <!--property name="${host}/" value="" /-->
  <property name="cacore.sdk.dir" location="caCORE_SDK/sdk" />
  <property name="cacore.sdk.filename" value="caCORE_SDK_411.tar.gz" />
  <property name="eclipse.workspace.dir" location="eclipse_ws" />
  <property name="eclipse.proj.dir" location="eclipse_ws/biobank2" />
  <property name="eclipse.proj.dir.common"
            location="eclipse_ws/biobank.common" />
  <property name="eclipse.proj.dir.importer"
            location="eclipse_ws/biobank2.importer" />
  <property name="eclipse.proj.dir.tools"
            location="eclipse_ws/biobank2.tools" />
  <property name="eclipse.proj.dir.junit"
            location="eclipse_ws/biobank2.tests" />
  <property name="scripts.proj.dir" location="scripts" />
  <!--tp-->
  <property name="model.proj.dir" location="model" />
  <!--tp-->
  <property name="data.dir" location="data" />
  <property name="data.sql.dir" location="${data.dir}/sql" />
  <property name="schema.dir" location="schema" />
  <property name="security.dir" location="security" />
  <property name="secu-log.dir" location="security-logs" />
  <property name="database.host" value="localhost" />
  <property name="database.name" value="biobank2" />
  <property name="database.username" value="dummy" />
  <property name="database.password" value="ozzy498" />
  <property name="req.jars.dir" value="jars" />
  <property name="lib-sources.dir" value="lib-sources" />
  <property name="biobank2.jar.files"
            value="gluegen.jar,jdom.jar,commons-beanutils-1.8.0.jar, commons-digester-1.7.jar, iText-2.1.0.jar, jasperreports-3.7.0.jar,DynamicJasper-3.0.14.jar,jdt-compiler-3.1.1.jar,mailapi.jar,smtp.jar,spiffy-all-0.05.jar,SuperCSV-1.52.jar" />
  <property name="biobank.common.jar.files" value="xpp3-1.1.3.4.C.jar, commons-lang-2.4.jar,xstream-1.3.1.jar" />
  <property name="biobank.importer.jar.files"
            value="mysql-connector-java-5.1.7-bin.jar" />
  <property name="biobank.tools.jar.files"
            value="commons-io-1.4.jar, jargs.jar,spiffy-all-0.05.jar,SuperCSV-1.52.jar,mysql-connector-java-5.1.7-bin.jar" />
  <property name="cacore.system.jar.files"
            value="commons-collections-3.2.jar,commons-logging-1.1.jar,hibernate-validator.jar" />
  <property name="test.output" location="testing" />
  <property name="converage.output" location="coverage" />
  <condition property="perl" value="perl" else="/usr/bin/perl">
    <os family="windows" />
  </condition>
  <condition property="debugFileExtension" value="-debug" else="">
    <equals arg1="${debug}" arg2="true" casesensitive="false" trim="true" />
  </condition>
  <condition property="LOG4J_LEVEL" value="info" else="error">
    <equals arg1="${debug}" arg2="true" casesensitive="false" trim="true" />
  </condition>
  <condition property="isHostAicmlMed">
    <equals arg1="${host.name}" arg2="aicml-med"
            casesensitive="true" trim="true" />
  </condition>
  <condition property="isHostCbsr">
    <equals arg1="${host.name}" arg2="cbsr.med.ualberta.ca"
            casesensitive="true" trim="true" />
  </condition>
  <condition property="isHostLocal">
    <and>
      <isfalse value="${isHostAicmlMed}" />
      <isfalse value="${isHostCbsr}" />
    </and>
  </condition>
  <condition property="cacore.sdk.tar.available">
    <available file="${cacore.sdk.filename}"/>
  </condition>
  <condition property="cacore.sdk.available">
    <available file="${cacore.sdk.dir}/build.xml"/>
  </condition>

  <!--
     files included in the sdk build.xml - necessary to be sure that we have
     all the keys for the target we redefined
    -->
  <property file="${cacore.sdk.dir}/installer.properties" />
  <property file="${cacore.sdk.dir}/local.properties" />
  <property file="${cacore.sdk.dir}/conf/deploy.properties" />
  <property file="${cacore.sdk.dir}/build.properties" />
  <property file="${cacore.sdk.dir}/${codegen.dir}/build.properties"
            prefix="codegen" />
  <property file="${cacore.sdk.dir}/${codegen.validator.dir}/build.properties"
            prefix="validator" />
  <property file="${cacore.sdk.dir}/${system.dir}/build.properties"
            prefix="system" />
  <property file="${cacore.sdk.dir}/${writable-api.dir}/build.properties"
            prefix="writable-api" />
  <property file="${cacore.sdk.dir}/${security.dir}/build.properties"
            prefix="security" />
  <property file="${cacore.sdk.dir}/${grid-remoting.dir}/build.properties"
            prefix="grid-remoting" />
  <property file="${cacore.sdk.dir}/${grid-jaas.dir}/build.properties"
            prefix="grid-jaas" />
  <condition property="server-exclude-commons-logging"
             value="commons-logging*.*" else="">
    <equals arg1="${SERVER_TYPE}" arg2="jboss" casesensitive="false"
            trim="true" />
  </condition>
  <condition property="server-exclude-log4j" value="log4j*.*" else="">
    <equals arg1="${SERVER_TYPE}" arg2="jboss" casesensitive="false"
            trim="true" />
  </condition>
  <condition property="server-exclude-classes-list" value="**/log4j*.*"
             else="">
    <equals arg1="${SERVER_TYPE}" arg2="jboss" casesensitive="false"
            trim="true" />
  </condition>
  <condition property="WRITABLE_API_EXTENSION_ENABLED" value="true"
             else="false">
    <or>
      <equals arg1="${ENABLE_WRITABLE_API_EXTENSION}" arg2="true"
              casesensitive="false" trim="true" />
      <equals arg1="${ENABLE_WRITABLE_API_EXTENSION}" arg2="yes"
              casesensitive="false" trim="true" />
    </or>
  </condition>
  <condition property="read-api-exclude-list" value="" else="*.jar">
    <equals arg1="${WRITABLE_API_EXTENSION_ENABLED}" arg2="true"
            casesensitive="false" trim="true" />
  </condition>
  <condition property="SECURITY_ENABLED" value="true" else="false">
    <or>
      <equals arg1="${ENABLE_SECURITY}" arg2="true" casesensitive="false"
              trim="true" />
      <equals arg1="${ENABLE_SECURITY}" arg2="yes" casesensitive="false"
              trim="true" />
    </or>
  </condition>
  <!-- end of copied part -->
  <!-- caCORE SDK -->
  <target name="cacore-download"
          unless="cacore.sdk.tar.available"
          description="downloads caCORE SDK from the host machine">
    <echo message="downloading caCORE SDK..." />
    <exec executable="curl">
      <arg value="--silent" />
      <arg value="-o${cacore.sdk.filename}" />
      <arg value="http://${host}/${cacore.sdk.filename}" />
    </exec>
  </target>
  <target name="cacore-untar" depends="cacore-download"
          unless="cacore.sdk.available"
          description="untars the caCORE SDK tarball">
    <echo message="untaring caCORE SDK..." />
    <untar src="${cacore.sdk.filename}" compression="gzip"
           dest="${cacore.sdk.dir}" />
  </target>
  <target name="check-cacore-sdk-uptodate"
          depends="cacore-untar">
    <uptodate property="cacore.sdk.uptodate"
              targetfile="${cacore.sdk.dir}/output/biobank2">
      <srcfiles file="sdk_conf/deploy.properties" />
      <srcfiles file="sdk_conf/build.properties" />
      <srcfiles file="sdk_conf/validator-extension-Config.xml" />
      <srcfiles file="sdk_conf/config.xml" />
      <srcfiles file="sdk_conf/application-config-client.xml" />
      <srcfiles file="model/biobank2.uml" />
    </uptodate>
  </target>
  <target name="sdk" depends="check-cacore-sdk-uptodate"
          unless="cacore.sdk.uptodate"
          description="builds the caCORE SDK from the data model">
    <copy file="sdk_conf/deploy.properties"
          tofile="${cacore.sdk.dir}/conf/deploy.properties" />
    <copy file="sdk_conf/build.properties" tofile="${cacore.sdk.dir}/build.properties" />
    <copy file="sdk_conf/validator-extension-Config.xml" tofile="${cacore.sdk.dir}/conf/codegen/validator-extension-Config.xml" />
    <copy file="sdk_conf/application-config.xml" tofile="${cacore.sdk.dir}/conf/system/web/WEB-INF/classes/application-config.xml" />
    <copy file="sdk_conf/application-config-client.xml" tofile="${cacore.sdk.dir}/conf/system/package/local-client/conf/application-config-client.xml" />
    <copy file="sdk_conf/application-config-client-info.xml" tofile="${cacore.sdk.dir}/conf/system/package/remote-client/conf/application-config-client-info.xml" />
    <copy file="sdk_conf/application-config-security.xml" tofile="${cacore.sdk.dir}/conf/system/web/WEB-INF/classes/application-config-security.xml" />
    <copy file="security-logs/log4j.xml"
          tofile="${cacore.sdk.dir}/conf/system/web/WEB-INF/classes/log4j.xml" overwrite="true"/>
    <replace file="${cacore.sdk.dir}/conf/system/web/WEB-INF/classes/log4j.xml" token="@LOG4J_LEVEL@" value="${LOG4J_LEVEL}"/>
    <ant dir="${cacore.sdk.dir}" target="build-system" inheritRefs="false" />
  </target>
  <target name="sdk-files" depends="sdk">
    <fileset dir="${cacore.sdk.dir}/output/biobank2/package/remote-client/lib"
             id="sdk.jar.files">
      <include name="*.jar" />
    </fileset>
    <pathconvert pathsep="," property="sdk.jar.files.basename"
                 refid="sdk.jar.files">
      <map from="${cacore.sdk.dir}/output/biobank2/package/remote-client/lib/"
           to="" />
    </pathconvert>

    <fileset dir="${cacore.sdk.dir}/output/biobank2/package/local-client/lib" id="sdk.local.jar.files">
      <include name="*.jar" />
    </fileset>

    <pathconvert pathsep="," property="sdk.local.jar.files.basename" refid="sdk.local.jar.files">
      <map from="${cacore.sdk.dir}/output/biobank2/package/local-client/lib/" to="" />
    </pathconvert>
  </target>
  <!-- Eclipse -->
  <target name="java-client-manifest">
    <manifest file="${eclipse.proj.dir}/META-INF/MANIFEST.MF" mode="update">
      <attribute name="Bundle-Version" value="${java.client.version.num}"/>
    </manifest>
    <fixcrlf srcdir="${eclipse.proj.dir}/META-INF" eol="lf" eof="asis" encoding="ISO-8859-1">
      <include name="**/*.MF" />
    </fixcrlf>
    <propertyfile file="eclipse_ws/biobank2/about.mappings">
      <entry key="0" value="${java.client.version.num}"/>
    </propertyfile>
  </target>
  <target name="deploy-eclipse" depends="sdk-files,java-client-manifest"
          description="deploys the caCORE SDK beans to the eclipse project">
    <dependset>
      <srcfilelist dir="${cacore.sdk.dir}/system/lib"
                   files="${cacore.system.jar.files}" />
      <targetfilelist dir="${eclipse.proj.dir.common}/lib"
                      files="${cacore.system.jar.files}" />
    </dependset>
    <dependset>
      <srcfilelist dir="${req.jars.dir}" files="${biobank.common.jar.files}" />
      <targetfilelist dir="${eclipse.proj.dir.common}/lib"
                      files="${biobank.common.jar.files}" />
    </dependset>
    <dependset>
      <srcfilelist dir="${req.jars.dir}" files="${biobank2.jar.files}" />
      <targetfilelist dir="${eclipse.proj.dir}/lib"
                      files="${biobank2.jar.files}" />
    </dependset>
    <dependset>
      <srcfilelist dir="${req.jars.dir}"
                   files="${biobank.importer.jar.files}" />
      <targetfilelist dir="${eclipse.proj.dir.importer}/lib"
                      files="${biobank.importer.jar.files}" />
    </dependset>
    <dependset>
      <srcfilelist dir="${req.jars.dir}"
                   files="${biobank.tools.jar.files}" />
      <targetfilelist dir="${eclipse.proj.dir.tools}/lib"
                      files="${biobank.tools.jar.files}" />
    </dependset>
    <dependset>
      <srcfilelist dir="${cacore.sdk.dir}/writable-api/dist"
                   files="sdk-writable-client-framework.jar" />
      <targetfilelist dir="${eclipse.proj.dir.common}/lib"
                      files="sdk-writable-client-framework.jar" />
      <targetfilelist dir="${eclipse.proj.dir.importer}/lib"
                      files="sdk-writable-client-framework.jar" />
    </dependset>
    <dependset>
      <srcfilelist dir="${cacore.sdk.dir}/system/security/dist"
                   files="sdk-security.jar" />
      <targetfilelist dir="${eclipse.proj.dir.common}/lib"
                      files="sdk-security.jar" />
      <targetfilelist dir="${eclipse.proj.dir.importer}/lib"
                      files="sdk-security.jar" />
    </dependset>
    <dependset>
      <srcfilelist dir="${cacore.sdk.dir}/output/biobank2/package/remote-client/lib"
                   files="${sdk.jar.files.basename}" />
      <targetfilelist dir="${eclipse.proj.dir.common}/lib"
                      files="${sdk.jar.files.basename}" />
    </dependset>
    <copy todir="${eclipse.proj.dir.common}/lib/client">
      <fileset dir="${cacore.sdk.dir}/output/biobank2/package/remote-client/lib" />
      <fileset dir="${cacore.sdk.dir}/output/biobank2/package/ws-client/lib" />
      <filelist dir="${cacore.sdk.dir}/system/lib" files="${cacore.system.jar.files}" />
      <filelist dir="${req.jars.dir}" files="${biobank.common.jar.files}" />
      <fileset file="${cacore.sdk.dir}/system/security/dist/sdk-security.jar" />
      <fileset file="${cacore.sdk.dir}/writable-api/dist/sdk-writable-client-framework.jar"/>
    </copy>
    <copy todir="${eclipse.proj.dir.common}/lib/server">
      <fileset file="${cacore.sdk.dir}/system/dist/sdk-core.jar"/>
      <fileset file="${cacore.sdk.dir}/system/lib/csmapi-4.1.jar"/>
      <fileset file="${cacore.sdk.dir}/writable-api/dist/sdk-writable-core.jar"/>
    </copy>
    <copy todir="${eclipse.proj.dir.common}/conf">
      <filelist dir="${cacore.sdk.dir}/output/biobank2/package/remote-client/conf"
  	        files="application-config-client.xml,application-config-client-info.xml" />
    </copy>
    <copy todir="${eclipse.proj.dir}/lib">
      <filelist dir="${req.jars.dir}" files="${biobank2.jar.files}" />
    </copy>
    <copy todir="${eclipse.proj.dir.importer}/lib">
      <filelist dir="${req.jars.dir}" files="${biobank.importer.jar.files}"/>
      <fileset file="${cacore.sdk.dir}/output/biobank2/package/remote-client/lib/log4j-1.2.14.jar"/>
      <fileset file="${cacore.sdk.dir}/system/security/dist/sdk-security.jar"/>
    </copy>
    <copy todir="${eclipse.proj.dir.tools}/lib">
      <filelist dir="${req.jars.dir}" files="${biobank.tools.jar.files}"/>
    </copy>
    <copy todir="${eclipse.workspace.dir}/biobank2.ws-client/lib">
      <filelist dir="${cacore.sdk.dir}/output/biobank2/package/ws-client/lib" files="biobank2-beans.jar"/>
    </copy>
  </target>
  <!-- JBoss -->
  <target name="check-jboss-uptodate">
    <uptodate property="jboss.uptodate"
              targetfile="${env.JBOSS_HOME}/server/default/deploy/biobank2.war"
              srcfile="${cacore.sdk.dir}/output/biobank2/package/webapp/biobank2.war" />
  </target>
  <target name="hostAicmlMed" if="isHostAicmlMed">
    <copy file="${secu-log.dir}/jboss/${host.name}.cs.ualberta.ca.keystore"
          tofile="${env.JBOSS_HOME}/server/default/conf/biobank.keystore"
          overwrite="true" />
  </target>
  <target name="hostCbsr" if="isHostCbsr">
    <copy file="${secu-log.dir}/jboss/${host.name}.keystore"
          tofile="${env.JBOSS_HOME}/server/default/conf/biobank.keystore"
          overwrite="true" />
  </target>
  <target name="hostLocal" if="isHostLocal">
    <copy file="${secu-log.dir}/jboss/localhost.keystore"
          tofile="${env.JBOSS_HOME}/server/default/conf/biobank.keystore"
          overwrite="true" />
  </target>
  <target name="server-manifest">
    <manifest file="${eclipse.proj.dir.common}/META-INF/MANIFEST.MF" mode="update">
      <attribute name="Bundle-Version" value="${server.version.num}"/>
    </manifest>
    <fixcrlf srcdir="${eclipse.proj.dir.common}/META-INF" eol="lf" eof="asis" encoding="ISO-8859-1">
      <include name="**/*.MF" />
    </fixcrlf>
  </target>
  <target name="jboss.home.env">
    <fail unless="env.JBOSS_HOME" message="JBOSS_HOME environment variable not defined" />
  </target>
  <target name="deploy-jboss"
          depends="jboss.home.env,sdk-files,package-webapp-orm,check-jboss-uptodate,hostAicmlMed,hostCbsr,hostLocal,server-manifest"
          description="deploys the caCORE SDK webapp to JBoss"
          unless="jboss.uptodate">
    <copy file="${secu-log.dir}/jboss/login-config.xml"
          tofile="${env.JBOSS_HOME}/server/default/conf/login-config.xml"
          overwrite="true" />
    <copy file="${secu-log.dir}/jboss/server${debugFileExtension}.xml"
          tofile="${env.JBOSS_HOME}/server/default/deploy/jbossweb-tomcat55.sar/server.xml"
          overwrite="true" />
    <!-- for compatibility: this file has been split -->
    <delete file="${env.JBOSS_HOME}/server/default/deploy/mysql-ds.xml" />
    <copy file="${secu-log.dir}/jboss/upt-ds.xml"
          tofile="${env.JBOSS_HOME}/server/default/deploy/upt-ds.xml"
          overwrite="true" />
    <copy file="${secu-log.dir}/jboss/upt.war"
          tofile="${env.JBOSS_HOME}/server/default/deploy/upt.war"
          overwrite="true" />
    <copy file="${cacore.sdk.dir}/output/biobank2/package/webapp/biobank2.war"
          tofile="${env.JBOSS_HOME}/server/default/deploy/biobank2.war"
          overwrite="true" />
  </target>

  <target name="deploy"
          description="deploys to JBoss and Eclipse project">
    <antcall target="deploy-eclipse" />
    <antcall target="deploy-jboss" />
  </target>
  <target name="schema" depends="sdk"
          description="generates the database schema for the caCORE SDK data model">
    <ant dir="${schema.dir}" target="schemaexport" inheritRefs="false" />
  </target>
  <target name="dbcreate-add-tables" depends="strfields">
    <sql driver="${DB_DRIVER}"
         url="${DB_CONNECTION_URL}"
         userid="${DB_USERNAME}" password="${DB_PASSWORD}">
      DROP DATABASE IF EXISTS ${PROJECT_NAME};
      CREATE DATABASE ${PROJECT_NAME};
      ALTER DATABASE `${PROJECT_NAME}` DEFAULT CHARACTER SET latin1 COLLATE latin1_general_cs;
      <classpath>
        <fileset dir="${cacore.sdk.dir}/system/lib">
          <include name="*.jar" />
        </fileset>
      </classpath>
    </sql>
    <antcall target="schema" />
    <sql driver="${DB_DRIVER}"
         url="${DB_CONNECTION_URL}"
         userid="${DB_USERNAME}" password="${DB_PASSWORD}">
      <transaction src="${data.sql.dir}/createIndices.sql" />
      <transaction src="${data.sql.dir}/activityStatus.sql" />
      <transaction src="${data.sql.dir}/globalPvAttr.sql" />
      <transaction src="${data.sql.dir}/pvAttrType.sql" />
      <transaction src="${data.sql.dir}/sourceVessels.sql" />
      <transaction src="${data.sql.dir}/sampleTypes.sql" />
      <transaction src="${data.sql.dir}/containerLabelingScheme.sql" />
      <transaction src="${data.sql.dir}/shippingMethod.sql" />
      <transaction src="${secu-log.dir}/schemaSecurity.sql" />
      <transaction src="${secu-log.dir}/schemaLog.sql" />
      <transaction>commit;</transaction>
      <classpath>
        <fileset dir="${cacore.sdk.dir}/system/lib">
          <include name="*.jar" />
        </fileset>
      </classpath>
    </sql>
  </target>
  <target name="dbcreate-add-testuser" if="debug">
    <sql driver="${DB_DRIVER}"
         url="${DB_CONNECTION_URL}"
         userid="${DB_USERNAME}" password="${DB_PASSWORD}">
      <transaction src="${secu-log.dir}/addTestUser.sql" />
      <classpath>
        <fileset dir="${cacore.sdk.dir}/system/lib">
          <include name="*.jar" />
        </fileset>
      </classpath>
    </sql>
  </target>
  <target name="dbcreate" depends="dbcreate-add-tables,dbcreate-add-testuser"
         description="creates the default tables">
  </target>
  <target name="dbbackup"
          description="makes a copy of the current biobank2 database">
    <echo message="running scripts/dbbackup..." />
    <exec executable="scripts/dbbackup" failonerror="true"
          output="biobank2.sql">
      <arg line="${database.host} ${database.username} ${database.password} ${database.name}" />
    </exec>
  </target>

  <target name="strfields"
          description="Add the length='#' field into *.hbm.xml files, references the biobank.uml file for the VARCHAR(#)"
          depends="sdk">
    <java classpath="scripts/strfields.jar" classname="edu.ualberta.med.biobank.strfields.StrFields"
          failonerror="true" fork="true">
      <arg value="${model.proj.dir}/biobank2.uml" />
      <arg value="${cacore.sdk.dir}/output/biobank2/src/edu/ualberta/med/biobank/model" />
      <arg value="${eclipse.proj.dir.common}/src/edu/ualberta/med/biobank/common/VarCharLengths.java.template" />
    </java>
  </target>

  <target name="package-codegen-orm"
          description="REDO:: Packages the generated ORM and bean artifacts"
          depends="strfields">
    <jar destfile="${cacore.sdk.dir}\${build.jar.dir}\${orm.file}"
         basedir="${cacore.sdk.dir}\${output.src.dir}">
      <manifest>
        <attribute name="Generated-By" value="caCORE SDK Code Generator" />
        <attribute name="Version" value="${VERSION}" />
      </manifest>
      <include name="**/*.hbm.xml" />
      <include name="*.cfg.xml" />
      <include name="ehcache.xml" />
      <exclude name="${csm.security.config.file}" />
    </jar>
  </target>


  <target name="build-common-project">
    <echo message="Building common project" />
    <mkdir dir="${eclipse.proj.dir.common}/output" />
    <copy includeemptydirs="false" todir="${eclipse.proj.dir.common}/output">
      <fileset dir="${eclipse.proj.dir.common}/src">
  	<exclude name="**/*.launch" />
  	<exclude name="**/*.java" />
      </fileset>
    </copy>
    <javac debug="true" debuglevel="source,lines,vars"
  	destdir="${eclipse.proj.dir.common}/output" source="1.6" target="1.6"
           includeantruntime="false">
      <src path="${eclipse.proj.dir.common}/src" />
      <classpath>
  	<path id="biobank.common.classpath">
   	  <fileset dir="${eclipse.proj.dir.common}/lib/server">
	    <include name="*.jar" />
	  </fileset>
	  <fileset dir="${eclipse.proj.dir.common}/lib/client">
	    <include name="*.jar" />
	  </fileset>
	</path>
      </classpath>
    </javac>
  </target>


  <!-- copied from sdk build.xml -->
  <target name="package-webapp-orm" depends="package-codegen-orm,build-common-project">
    <war destfile="${cacore.sdk.dir}\${package.system.dir}\${PROJECT_NAME}.war"
         webxml="${cacore.sdk.dir}\${build.conf.web-inf.dir}\web.xml">
      <manifest>
        <attribute name="Generated-By"
                   value="biobank2 caCORE SDK Code Generator" />
        <attribute name="Version" value="${VERSION}" />
      </manifest>
      <lib dir="${cacore.sdk.dir}\${system.dir}\${system.dist.dir}"
           includes="*.jar" />
      <lib dir="${cacore.sdk.dir}\${writable-api.dir}\${writable-api.dist.dir}"
           includes="*.jar">
        <exclude name="${read-api-exclude-list}" />
      </lib>
      <lib dir="${cacore.sdk.dir}\${build.jar.dir}" includes="${bean.file}" />
      <lib dir="${cacore.sdk.dir}\${build.jar.dir}" includes="${orm.file}" />
      <lib dir="${cacore.sdk.dir}\${system.dir}\${system.lib.dir}"
           includes="*.jar">
        <exclude name="${server-exclude-commons-logging}" />
        <exclude name="${server-exclude-log4j}" />
        <exclude name="servlet.jar" />
        <exclude name="xercesImpl*.*" />
        <exclude name="cog*.*" />
      </lib>
      <lib dir="${cacore.sdk.dir}\${grid-jaas.dir}\${grid-jaas.dist.dir}"
           includes="*.*"
           excludes="${grid-jaas.file.output.jaas.jndibinder.name}" />
      <fileset dir="${cacore.sdk.dir}\${build.conf.system.web.dir}">
        <include name="**/*" />
        <exclude name="**/web.xml" />
        <exclude name="${server-exclude-classes-list}" />
      </fileset>
      <fileset dir="${cacore.sdk.dir}\${system.dir}\${system.web.dir}">
        <include name="**/*" />
      </fileset>
      <fileset dir="${cacore.sdk.dir}\${build.dir}">
        <include name="docs/**/*" />
      </fileset>
      <classes dir="${cacore.sdk.dir}\${output.src.dir}">
        <include name="${csm.security.config.file}" />
        <include name="${csm.ehcache.file}" />
        <include name="${clm.object.state.logger.config}" />
      </classes>
      <classes dir="${eclipse.proj.dir.common}/output" >
        <exclude name="**/client/**"/>
      </classes>
      <webinf dir="${cacore.sdk.dir}\${output.src.dir}">
        <include name="server-config.wsdd" />
      </webinf>
    </war>
  </target>

  <target name="clean-jars" description="deletes jars from eclipse projects">
    <delete>
      <fileset dir="${eclipse.proj.dir}/lib" includes="**/*.jar" />
      <fileset dir="${eclipse.proj.dir.common}/lib" includes="**/*.jar" />
      <fileset dir="${eclipse.proj.dir.importer}/lib" includes="**/*.jar" />
    </delete>
  </target>


  <target name="clean"
          depends="tests-clean,clean-jars, clean-caCore"
          description="cleans caCORE SDK and deletes jars from eclipse projects">
    <ant target="clean-jars" />
    <delete dir="${eclipse.proj.dir.common}/output" />
  </target>

  <target name="clean-caCore"
          if="cacore.sdk.available">
    <ant dir="${cacore.sdk.dir}" target="clean" inheritRefs="false" />
  </target>


  <!-- JUnit -->

  <property name="dest.dir" value="${eclipse.proj.dir.junit}/build" />
  <property name="dest.dir.classes" value="${dest.dir}/classes" />
  <property name="dest.dir.results" value="testing" />
  <property name="dest.dir.results.raw" value="${dest.dir.results}/raw" />
  <path id="common.class.path">
    <fileset dir="${eclipse.proj.dir.common}/lib/client">
      <include name="*.jar" />
    </fileset>
  </path>
  <path id="junit.class.path">
    <fileset dir="jars">
      <include name="*.jar" />
    </fileset>
  </path>
  <path id="application.config.class.path">
    <pathelement location="${eclipse.proj.dir.common}/conf" />
  </path>
  <path id="common.lib.class.path">
    <fileset dir="${eclipse.proj.dir.common}/lib">
      <include name="**/*.jar" />
    </fileset>
  </path>
  <path id="test.class.path">
    <pathelement location="${dest.dir.classes}" />
  </path>
  <target name="tests-clean">
    <delete dir="${dest.dir}" />
    <delete dir="${dest.dir.results}" />
  </target>
  <target name="prepare">
    <mkdir dir="${dest.dir}" />
    <mkdir dir="${dest.dir.classes}" />
    <mkdir dir="${dest.dir.results}" />
    <mkdir dir="${dest.dir.results.raw}" />
  </target>
  <target name="common-compile" depends="tests-clean,prepare,deploy-eclipse">
    <copy includeemptydirs="false" todir="${dest.dir.classes}">
      <fileset dir="${eclipse.proj.dir.common}/src">
  	<exclude name="**/*.launch" />
  	<exclude name="**/*.java" />
      </fileset>
    </copy>
    <javac srcdir="${eclipse.proj.dir.common}/src"
           destdir="${dest.dir.classes}" debug="true" debuglevel="lines,source"
           includeantruntime="false">
      <classpath refid="common.lib.class.path" />
    </javac>
  </target>
  <target name="tests-compile" depends="common-compile">
    <javac srcdir="${eclipse.proj.dir.junit}/src" destdir="${dest.dir.classes}"
           debug="true" debuglevel="lines,source" includeantruntime="false">
      <classpath refid="common.class.path" />
      <classpath refid="junit.class.path" />
    </javac>
  </target>
  <target name="test" depends="tests-compile"
          description="executes test cases">
    <junit printsummary="yes" haltonfailure="no" showoutput="yes" fork="true">
      <classpath refid="junit.class.path" />
      <classpath refid="application.config.class.path" />
      <classpath refid="common.lib.class.path" />
      <classpath refid="test.class.path" />
      <formatter usefile="yes" type="brief" />
      <batchtest todir="testing/raw">
        <fileset dir="${eclipse.proj.dir.junit}/src">
          <include name="**/Test*.java" />
          <exclude name="edu/ualberta/med/biobank/test/speed/**" />
          <exclude name="**/TestCommon.java" />
          <exclude name="**/TestDatabase.java" />
          <exclude name="**/TestFunctionalities.java" />
          <exclude name="**/TestReportsOnExistingData.java" />
          <exclude name="**/AllTests.java" />
        </fileset>
        <formatter type="xml" />
      </batchtest>
    </junit>
    <junitreport todir="${dest.dir.results}">
      <fileset dir="${dest.dir.results.raw}">
        <include name="TEST-*.xml" />
      </fileset>
      <report format="noframes" todir="${dest.dir.results}/html" />
    </junitreport>
    <echo message="test report: file://${test.output}/html/junit-noframes.html" />
  </target>
  <property name="emma.dir" value="${req.jars.dir}" />
  <path id="emma.lib">
    <pathelement location="${emma.dir}/emma.jar" />
    <pathelement location="${emma.dir}/emma_ant.jar" />
  </path>
  <target name="emma"
          description="turns on EMMA's on-the-fly instrumentation mode">
    <property name="emma.enabled" value="true" />
  </target>
  <target name="test-emma" depends="tests-compile"
          description="executes test cases with code coverage">
    <delete file="${test.output}/coverage.emma" />
    <copy file="${eclipse.proj.dir.common}/src/edu/ualberta/med/biobank/common/reports/reports.properties"
          tofile="${dest.dir.classes}/edu/ualberta/med/biobank/common/reports/reports.properties" />
    <junit printsummary="yes" haltonfailure="no" showoutput="yes" fork="true">
      <classpath refid="junit.class.path" />
      <classpath refid="application.config.class.path" />
      <classpath refid="common.lib.class.path" />
      <classpath refid="test.class.path" />
      <classpath refid="emma.lib" />
      <formatter usefile="yes" type="brief" />
      <!--test name="test.ualberta.med.biobank.AllTests" haltonfailure="no" outfile="result">
      <formatter type="xml" />
      </test-->
      <batchtest todir="testing/raw">
        <fileset dir="${eclipse.proj.dir.junit}/src">
          <include name="**/Test*.java" />
          <exclude name="edu/ualberta/med/biobank/test/speed/**" />
          <exclude name="**/TestCommon.java" />
          <exclude name="**/TestDatabase.java" />
          <exclude name="**/TestFunctionalities.java" />
          <exclude name="**/AllTests.java" />
        </fileset>
        <formatter type="xml" />
      </batchtest>
      <jvmarg value="-Xbootclasspath/a:${emma.dir}/emma.jar" />
      <jvmarg value="emmarun" />
      <jvmarg value="-out" />
      <jvmarg value="${test.output}/coverage.emma" />
      <jvmarg value="-raw" />
      <jvmarg value="-merge" />
      <jvmarg value="yes" />
      <jvmarg value="-ix" />
      <jvmarg value="edu.ualberta.med.biobank.common*" />
    </junit>
    <junitreport todir="${dest.dir.results}">
      <fileset dir="${dest.dir.results.raw}">
        <include name="TEST-*.xml" />
      </fileset>
      <report format="noframes" todir="${dest.dir.results}/html" />
    </junitreport>
    <java classname="emma" fork="true">
      <arg value="report" />
      <arg value="-r" />
      <arg value="html" />
      <arg value="-sp" />
      <arg value="eclipse_ws/biobank.common/src" />
      <arg value="-in" />
      <arg value="testing/coverage.emma" />
      <classpath>
        <pathelement path="${emma.dir}/emma.jar" />
      </classpath>
    </java>
    <echo message="test report: file://${test.output}/html/junit-noframes.html" />
    <echo message="coverage report: file://${converage.output}/index.html" />
  </target>
</project>
