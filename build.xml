<?xml version="1.0" encoding="utf-8"?>
<project name="biobank2" basedir="." default="deploy">

  <!--
  Overall build file
  use command "ant -projecthelp" to display the targets.
  -->
  <exec executable="hostname" outputproperty="host.name">
    <arg value="-f" />
  </exec>

  <property name="server.version.num" value="1.4.0.pre" />
  <property name="java.client.version.num" value="1.4.0.pre" />

  <property environment="env" />
  <property name="host" value="aicml-med.cs.ualberta.ca" />
  <!--property name="${host}/" value="" /-->
  <property name="cacore.sdk.dir" location="caCORE_SDK/sdk" />
  <property name="cacore.sdk.filename" value="caCORE_SDK_411.tar.gz" />
  <property name="eclipse.workspace.dir" location="eclipse_ws" />
  <property name="eclipse.proj.dir" location="eclipse_ws/biobank2" />
  <property name="eclipse.proj.dir.common"
            location="eclipse_ws/biobank.common" />
  <property name="eclipse.proj.dir.tools"
            location="eclipse_ws/biobank2.tools" />
  <property name="eclipse.proj.dir.junit"
            location="eclipse_ws/biobank2.tests" />
  <property name="scripts.proj.dir" location="scripts" />
  <property name="model.proj.dir" location="model" />
  <property name="data.dir" location="data" />
  <property name="data.sql.dir" location="${data.dir}/sql" />
  <property name="schema.dir" location="schema" />
  <property name="security.dir" location="security" />
  <property name="secu-log.dir" location="security-logs" />
  <property name="product.dir" location="${basedir}/product" />
  <property name="database.host" value="localhost" />
  <property name="database.name" value="biobank2" />
  <property name="database.username" value="dummy" />
  <property name="database.password" value="ozzy498" />
  <property name="req.jars.dir" value="jars" />
  <property name="lib-sources.dir" value="lib-sources" />
  <property name="biobank2.jar.files"
            value="gluegen.jar,jdom.jar,commons-beanutils-1.8.0.jar, commons-digester-1.7.jar, iText-2.1.0.jar, jasperreports-3.7.0.jar,DynamicJasper-3.0.14.jar,jdt-compiler-3.1.1.jar,mailapi.jar,smtp.jar,spiffy-all-0.05.jar,SuperCSV-1.52.jar" />
  <property name="biobank.common.jar.files"
            value="xpp3-1.1.3.4.C.jar, commons-lang-2.4.jar,xstream-1.3.1.jar" />
  <property name="biobank.tools.jar.files"
            value="commons-io-1.4.jar, jargs.jar,spiffy-all-0.05.jar,SuperCSV-1.52.jar,mysql-connector-java-5.1.15-bin.jar" />
  <property name="cacore.system.jar.files"
            value="commons-collections-3.2.jar,commons-logging-1.1.jar,hibernate-validator.jar" />
  <property name="converage.output" location="coverage" />
  <condition property="perl" value="perl" else="/usr/bin/perl">
    <os family="windows" />
  </condition>
  <condition property="debugFileExtension" value="-debug" else="">
    <equals arg1="${debug}" arg2="true" casesensitive="false" trim="true" />
  </condition>
  <condition property="LOG4J_LEVEL_WARN" value="warn" else="info">
    <equals arg1="${debug}" arg2="true" casesensitive="false" trim="true" />
  </condition>
  <condition property="LOG4J_LEVEL_DEBUG" value="debug" else="info">
	<equals arg1="${debug}" arg2="true" casesensitive="false" trim="true" />
  </condition>
  <condition property="isHostAicmlMed">
    <equals arg1="${host.name}"
            arg2="aicml-med"
            casesensitive="true"
            trim="true" />
  </condition>
  <condition property="isHostAicml5">
    <equals arg1="${host.name}"
            arg2="aicml5"
            casesensitive="true"
            trim="true" />
  </condition>
  <condition property="isHostCbsr">
    <equals arg1="${host.name}"
            arg2="cbsr.med.ualberta.ca"
            casesensitive="true"
            trim="true" />
  </condition>
  <condition property="isHostCbsrTraining">
    <equals arg1="${host.name}"
            arg2="cbsr-training"
            casesensitive="true"
            trim="true" />
  </condition>
  <condition property="isHostLocal">
    <and>
      <isfalse value="${isHostAicmlMed}" />
      <isfalse value="${isHostAicml5}" />
      <isfalse value="${isHostCbsr}" />
      <isfalse value="${isHostCbsrTraining}" />
    </and>
  </condition>
  <condition property="cacore.sdk.tar.available">
    <available file="${cacore.sdk.filename}" />
  </condition>
  <condition property="cacore.sdk.available">
    <available file="${cacore.sdk.dir}/build.xml" />
  </condition>

  <path id="biobank.common.build.classpath">
    <fileset dir="${cacore.sdk.dir}/output/biobank2/package/remote-client/lib">
      <include name="*.jar" />
    </fileset>
    <fileset dir="${cacore.sdk.dir}/output/biobank2/package/local-client/lib">
      <include name="*.jar" />
    </fileset>
    <fileset dir="${cacore.sdk.dir}/writable-api/dist">
      <include name="*.jar" />
    </fileset>
    <fileset dir="${cacore.sdk.dir}/system/security/dist">
      <include name="*.jar" />
    </fileset>
    <fileset dir="${req.jars.dir}">
      <include name="*.jar" />
    </fileset>
  </path>

  <path id="biobank.common.run.classpath">
    <path refid="biobank.common.build.classpath" />
    <pathelement location="${eclipse.proj.dir.common}/output" />
    <pathelement location="${eclipse.proj.dir.common}/conf" />
  </path>

  <!--
  files included in the sdk build.xml - necessary to be sure that we have
  all the keys for the target we redefined
  -->
  <property file="${cacore.sdk.dir}/installer.properties" />
  <property file="${cacore.sdk.dir}/local.properties" />
  <property file="${cacore.sdk.dir}/conf/deploy.properties" />
  <property file="${cacore.sdk.dir}/build.properties" />
  <property file="${cacore.sdk.dir}/${codegen.dir}/build.properties"
            prefix="codegen" />
  <property file="${cacore.sdk.dir}/${codegen.validator.dir}/build.properties"
            prefix="validator" />
  <property file="${cacore.sdk.dir}/${system.dir}/build.properties"
            prefix="system" />
  <property file="${cacore.sdk.dir}/${writable-api.dir}/build.properties"
            prefix="writable-api" />
  <property file="${cacore.sdk.dir}/${security.dir}/build.properties"
            prefix="security" />
  <property file="${cacore.sdk.dir}/${grid-remoting.dir}/build.properties"
            prefix="grid-remoting" />
  <property file="${cacore.sdk.dir}/${grid-jaas.dir}/build.properties"
            prefix="grid-jaas" />
  <condition property="server-exclude-commons-logging"
             value="commons-logging*.*"
             else="">
    <equals arg1="${SERVER_TYPE}"
            arg2="jboss"
            casesensitive="false"
            trim="true" />
  </condition>
  <condition property="server-exclude-log4j" value="log4j*.*" else="">
    <equals arg1="${SERVER_TYPE}"
            arg2="jboss"
            casesensitive="false"
            trim="true" />
  </condition>
  <condition property="server-exclude-classes-list" value="**/log4j*.*" else="">
    <equals arg1="${SERVER_TYPE}"
            arg2="jboss"
            casesensitive="false"
            trim="true" />
  </condition>
  <condition property="WRITABLE_API_EXTENSION_ENABLED"
             value="true"
             else="false">
    <or>
      <equals arg1="${ENABLE_WRITABLE_API_EXTENSION}"
              arg2="true"
              casesensitive="false"
              trim="true" />
      <equals arg1="${ENABLE_WRITABLE_API_EXTENSION}"
              arg2="yes"
              casesensitive="false"
              trim="true" />
    </or>
  </condition>
  <condition property="read-api-exclude-list" value="" else="*.jar">
    <equals arg1="${WRITABLE_API_EXTENSION_ENABLED}"
            arg2="true"
            casesensitive="false"
            trim="true" />
  </condition>
  <condition property="SECURITY_ENABLED" value="true" else="false">
    <or>
      <equals arg1="${ENABLE_SECURITY}"
              arg2="true"
              casesensitive="false"
              trim="true" />
      <equals arg1="${ENABLE_SECURITY}"
              arg2="yes"
              casesensitive="false"
              trim="true" />
    </or>
  </condition>
  <!-- end of copied part -->
  <!-- caCORE SDK -->
  <target name="cacore-download"
          unless="cacore.sdk.tar.available"
          description="downloads caCORE SDK from the host machine">
    <echo message="downloading caCORE SDK..." />
    <exec executable="curl">
      <arg value="--silent" />
      <arg value="-o${cacore.sdk.filename}" />
      <arg value="http://${host}/${cacore.sdk.filename}" />
    </exec>
  </target>
  <target name="cacore-untar"
          depends="cacore-download"
          unless="cacore.sdk.available"
          description="untars the caCORE SDK tarball">
    <echo message="untaring caCORE SDK..." />
    <untar src="${cacore.sdk.filename}"
           compression="gzip"
           dest="${cacore.sdk.dir}" />
  </target>
  <target name="check-cacore-sdk-uptodate">
    <uptodate property="cacore.sdk.uptodate"
              targetfile="${cacore.sdk.dir}/output/biobank2">
      <srcfiles file="sdk_conf/deploy.properties" />
      <srcfiles file="sdk_conf/build.properties" />
      <srcfiles file="${cacore.sdk.dir}/conf/codegen/validator-extension-Config.xml" />
      <srcfiles file="sdk_conf/config.xml" />
      <srcfiles file="sdk_conf/application-config-client.xml" />
      <srcfiles file="${model.proj.dir}/biobank2.uml" />
    </uptodate>
  </target>

  <target name="sdk"
          depends="validators,check-cacore-sdk-uptodate,log4j-conf"
          unless="cacore.sdk.uptodate"
          description="builds the caCORE SDK from the data model">
    <copy file="sdk_conf/deploy.properties"
          tofile="${cacore.sdk.dir}/conf/deploy.properties" />
    <copy file="sdk_conf/build.properties"
          tofile="${cacore.sdk.dir}/build.properties" />
    <copy file="sdk_conf/application-config.xml"
          tofile="${cacore.sdk.dir}/conf/system/web/WEB-INF/classes/application-config.xml" />
    <copy file="sdk_conf/application-config-client.xml"
          tofile="${cacore.sdk.dir}/conf/system/package/local-client/conf/application-config-client.xml" />
    <copy file="sdk_conf/application-config-client-info.xml"
          tofile="${cacore.sdk.dir}/conf/system/package/remote-client/conf/application-config-client-info.xml" />
    <copy file="sdk_conf/application-config-security.xml"
          tofile="${cacore.sdk.dir}/conf/system/web/WEB-INF/classes/application-config-security.xml" />
    <copy file="${req.jars.dir}/mysql-connector-java-5.1.15-bin.jar"
          tofile="${cacore.sdk.dir}/system/lib/mysql-connector-java-5.1.15-bin.jar" />
    <delete file="${cacore.sdk.dir}/system/lib/mysql-connector-java-3.1.13-bin.jar" />
    <ant dir="${cacore.sdk.dir}" target="build-system" inheritRefs="false" />
  </target>
  <target name="log4j-conf">
    <copy file="security-logs/log4j.xml"
          tofile="${cacore.sdk.dir}/output/biobank2/conf/system/web/WEB-INF/classes/log4j.xml"
          overwrite="true" />
    <replace file="${cacore.sdk.dir}/output/biobank2/conf/system/web/WEB-INF/classes/log4j.xml">
      <replacefilter token="@LOG4J_LEVEL_WARN@" value="${LOG4J_LEVEL_WARN}" />
      <replacefilter token="@LOG4J_LEVEL_DEBUG@" value="${LOG4J_LEVEL_DEBUG}" />
      <!-- these one are copied from the caCore ant build file. -->
      <replacefilter token="@CLM_DB_DRIVER@" value="${CLM_DB_DRIVER}" />
      <replacefilter token="@CLM_DB_CONNECTION_URL@"
                     value="${CLM_DB_CONNECTION_URL}" />
      <replacefilter token="@CLM_DB_USERNAME@" value="${CLM_DB_USERNAME}" />
      <replacefilter token="@CLM_DB_PASSWORD@" value="${CLM_DB_PASSWORD}" />
      <replacefilter token="@CLM_PROJECT_NAME@" value="${CLM_PROJECT_NAME}" />
    </replace>

  </target>

  <target name="sdk-files" depends="sdk">
    <fileset dir="${cacore.sdk.dir}/output/biobank2/package/remote-client/lib"
             id="sdk.jar.files">
      <include name="*.jar" />
    </fileset>
    <pathconvert pathsep=","
                 property="sdk.jar.files.basename"
                 refid="sdk.jar.files">
      <map from="${cacore.sdk.dir}/output/biobank2/package/remote-client/lib/"
           to="" />
    </pathconvert>

    <fileset dir="${cacore.sdk.dir}/output/biobank2/package/local-client/lib"
             id="sdk.local.jar.files">
      <include name="*.jar" />
    </fileset>

    <pathconvert pathsep=","
                 property="sdk.local.jar.files.basename"
                 refid="sdk.local.jar.files">
      <map from="${cacore.sdk.dir}/output/biobank2/package/local-client/lib/"
           to="" />
    </pathconvert>
  </target>

  <!-- Eclipse -->
  <target name="java-client-manifest">
    <manifest file="${eclipse.proj.dir}/META-INF/MANIFEST.MF" mode="update">
      <attribute name="Bundle-Version" value="${java.client.version.num}" />
    </manifest>
    <fixcrlf srcdir="${eclipse.proj.dir}/META-INF"
             eol="lf"
             eof="asis"
             encoding="ISO-8859-1">
      <include name="**/*.MF" />
    </fixcrlf>
    <propertyfile file="eclipse_ws/biobank2/about.mappings">
      <entry key="0" value="${java.client.version.num}" />
    </propertyfile>
  </target>
  <target name="deploy-eclipse"
          depends="sdk-files,java-client-manifest"
          description="deploys the caCORE SDK beans to the eclipse project">
    <dependset>
      <srcfilelist dir="${cacore.sdk.dir}/system/lib"
                   files="${cacore.system.jar.files}" />
      <targetfilelist dir="${eclipse.proj.dir.common}/lib"
                      files="${cacore.system.jar.files}" />
    </dependset>
    <dependset>
      <srcfilelist dir="${req.jars.dir}" files="${biobank.common.jar.files}" />
      <targetfilelist dir="${eclipse.proj.dir.common}/lib"
                      files="${biobank.common.jar.files}" />
    </dependset>
    <dependset>
      <srcfilelist dir="${req.jars.dir}" files="${biobank2.jar.files}" />
      <targetfilelist dir="${eclipse.proj.dir}/lib"
                      files="${biobank2.jar.files}" />
    </dependset>
    <dependset>
      <srcfilelist dir="${req.jars.dir}" files="${biobank.tools.jar.files}" />
      <targetfilelist dir="${eclipse.proj.dir.tools}/lib"
                      files="${biobank.tools.jar.files}" />
    </dependset>
    <dependset>
      <srcfilelist dir="${cacore.sdk.dir}/writable-api/dist"
                   files="sdk-writable-client-framework.jar" />
      <targetfilelist dir="${eclipse.proj.dir.common}/lib"
                      files="sdk-writable-client-framework.jar" />
    </dependset>
    <dependset>
      <srcfilelist dir="${cacore.sdk.dir}/system/security/dist"
                   files="sdk-security.jar" />
      <targetfilelist dir="${eclipse.proj.dir.common}/lib"
                      files="sdk-security.jar" />
    </dependset>
    <dependset>
      <srcfilelist dir="${cacore.sdk.dir}/output/biobank2/package/remote-client/lib"
                   files="${sdk.jar.files.basename}" />
      <targetfilelist dir="${eclipse.proj.dir.common}/lib"
                      files="${sdk.jar.files.basename}" />
    </dependset>
    <copy todir="${eclipse.proj.dir.common}/lib/client">
      <fileset dir="${cacore.sdk.dir}/output/biobank2/package/remote-client/lib" />
      <fileset dir="${cacore.sdk.dir}/output/biobank2/package/ws-client/lib" />
      <filelist dir="${cacore.sdk.dir}/system/lib"
                files="${cacore.system.jar.files}" />
      <filelist dir="${req.jars.dir}" files="${biobank.common.jar.files}" />
      <fileset file="${req.jars.dir}/mysql-connector-java-5.1.15-bin.jar" />
      <fileset file="${cacore.sdk.dir}/system/security/dist/sdk-security.jar" />
      <fileset file="${cacore.sdk.dir}/writable-api/dist/sdk-writable-client-framework.jar" />
    </copy>
    <copy todir="${eclipse.proj.dir.common}/lib/server">
      <fileset file="${cacore.sdk.dir}/system/dist/sdk-core.jar" />
      <fileset file="${cacore.sdk.dir}/system/lib/csmapi-4.1.jar" />
      <fileset file="${cacore.sdk.dir}/writable-api/dist/sdk-writable-core.jar" />
    </copy>
    <copy todir="${eclipse.proj.dir.common}/conf">
      <filelist dir="${cacore.sdk.dir}/output/biobank2/package/remote-client/conf"
                files="application-config-client.xml,application-config-client-info.xml" />
    </copy>
    <copy todir="${eclipse.proj.dir}/lib">
      <filelist dir="${req.jars.dir}" files="${biobank2.jar.files}" />
    </copy>
    <copy todir="${eclipse.proj.dir.tools}/lib">
      <filelist dir="${req.jars.dir}" files="${biobank.tools.jar.files}" />
    </copy>
    <!--copy todir="${eclipse.workspace.dir}/biobank2.ws-client/lib">
      <filelist dir="${cacore.sdk.dir}/output/biobank2/package/ws-client/lib"
                files="biobank2-beans.jar" />
    </copy-->
    <copy todir="${eclipse.proj.dir.tools}/lib">
      <fileset file="${cacore.sdk.dir}/system/lib/log4j-1.2.14.jar" />
    </copy>
  </target>
  <!-- JBoss -->
  <target name="check-jboss-uptodate">
    <uptodate property="jboss.uptodate"
              targetfile="${env.JBOSS_HOME}/server/default/deploy/biobank2.war"
              srcfile="${cacore.sdk.dir}/output/biobank2/package/webapp/biobank2.war" />
  </target>
  <target name="hostAicmlMed" if="isHostAicmlMed">
    <copy file="${secu-log.dir}/jboss/${host.name}.cs.ualberta.ca.keystore"
          tofile="${env.JBOSS_HOME}/server/default/conf/biobank.keystore"
          overwrite="true" />
  </target>
  <target name="hostAicml5" if="isHostAicml5">
    <copy file="${secu-log.dir}/jboss/${host.name}.cs.ualberta.ca.keystore"
          tofile="${env.JBOSS_HOME}/server/default/conf/biobank.keystore"
          overwrite="true" />
  </target>
  <target name="hostCbsr" if="isHostCbsr">
    <copy file="${secu-log.dir}/jboss/${host.name}.keystore"
          tofile="${env.JBOSS_HOME}/server/default/conf/biobank.keystore"
          overwrite="true" />
  </target>
  <target name="hostCbsrTraining" if="isHostCbsrTraining">
    <copy file="${secu-log.dir}/jboss/${host.name}.keystore"
          tofile="${env.JBOSS_HOME}/server/default/conf/biobank.keystore"
          overwrite="true" />
  </target>
  <target name="hostLocal" if="isHostLocal">
    <copy file="${secu-log.dir}/jboss/localhost.keystore"
          tofile="${env.JBOSS_HOME}/server/default/conf/biobank.keystore"
          overwrite="true" />
  </target>
  <target name="server-manifest">
    <manifest file="${eclipse.proj.dir.common}/META-INF/MANIFEST.MF"
              mode="update">
      <attribute name="Bundle-Version" value="${server.version.num}" />
    </manifest>
    <fixcrlf srcdir="${eclipse.proj.dir.common}/META-INF"
             eol="lf"
             eof="asis"
             encoding="ISO-8859-1">
      <include name="**/*.MF" />
    </fixcrlf>
    <propertyfile file="${eclipse.proj.dir.common}/src/edu/ualberta/med/biobank/server/applicationservice/version.properties">
      <entry key="server.version" value="${server.version.num}" />
    </propertyfile>
  </target>
  <target name="jboss.home.env">
    <fail unless="env.JBOSS_HOME"
          message="JBOSS_HOME environment variable not defined" />
  </target>
  <target name="deploy-jboss"
          depends="jboss.home.env,sdk-files,package-webapp-orm,check-jboss-uptodate,hostAicmlMed,hostCbsr,hostCbsrTraining,hostLocal,server-manifest"
          description="deploys the caCORE SDK webapp to JBoss"
          unless="jboss.uptodate">
    <copy file="${secu-log.dir}/jboss/login-config.xml"
          tofile="${env.JBOSS_HOME}/server/default/conf/login-config.xml"
          overwrite="true" />
    <copy file="${secu-log.dir}/jboss/server${debugFileExtension}.xml"
          tofile="${env.JBOSS_HOME}/server/default/deploy/jbossweb-tomcat55.sar/server.xml"
          overwrite="true" />
    <!-- for compatibility: this file has been split -->
    <delete file="${env.JBOSS_HOME}/server/default/deploy/mysql-ds.xml" />
    <copy file="${secu-log.dir}/jboss/upt-ds.xml"
          tofile="${env.JBOSS_HOME}/server/default/deploy/upt-ds.xml"
          overwrite="true" />
    <copy file="${secu-log.dir}/jboss/upt.war"
          tofile="${env.JBOSS_HOME}/server/default/deploy/upt.war"
          overwrite="true" />
    <copy file="${cacore.sdk.dir}/output/biobank2/package/webapp/biobank2.war"
          tofile="${env.JBOSS_HOME}/server/default/deploy/biobank2.war"
          overwrite="true" />
  </target>

  <target name="deploy" description="deploys to JBoss and Eclipse project">
    <antcall target="deploy-eclipse" />
    <antcall target="deploy-jboss" />
  </target>
  <target name="schema"
          depends="sdk"
          description="generates the database schema for the caCORE SDK data model">
    <ant dir="${schema.dir}" target="schemaexport" inheritRefs="false" />
  </target>
  <target name="dbcreate-add-tables" depends="hbmstrings">
    <sql driver="${DB_DRIVER}"
         url="${DB_CONNECTION_URL}"
         userid="${DB_USERNAME}"
         password="${DB_PASSWORD}">
      DROP DATABASE IF EXISTS ${PROJECT_NAME};
      CREATE DATABASE ${PROJECT_NAME};
      ALTER DATABASE `${PROJECT_NAME}` DEFAULT CHARACTER SET latin1 COLLATE latin1_general_cs;
      <classpath>
        <fileset dir="${cacore.sdk.dir}/system/lib">
          <include name="*.jar" />
        </fileset>
      </classpath>
    </sql>
    <antcall target="schema" />
    <sql driver="${DB_DRIVER}"
         url="${DB_CONNECTION_URL}"
         userid="${DB_USERNAME}"
         password="${DB_PASSWORD}">
      <transaction src="${data.sql.dir}/createIndices.sql" />
      <transaction src="${data.sql.dir}/uniqueConstraints.sql" />
      <transaction src="${data.sql.dir}/activityStatus.sql" />
      <transaction src="${data.sql.dir}/globalEventAttr.sql" />
      <transaction src="${data.sql.dir}/eventAttrType.sql" />
      <transaction src="${data.sql.dir}/specimenTypes.sql" />
      <transaction src="${data.sql.dir}/containerLabelingScheme.sql" />
      <transaction src="${data.sql.dir}/shippingMethod.sql" />
      <transaction src="${secu-log.dir}/schemaSecurity.sql" />
      <transaction src="${secu-log.dir}/schemaLog.sql" />
      <transaction>commit;</transaction>
      <classpath>
        <fileset dir="${cacore.sdk.dir}/system/lib">
          <include name="*.jar" />
        </fileset>
      </classpath>
    </sql>
  </target>
  <target name="dbcreate-add-testuser" if="debug">
    <sql driver="${DB_DRIVER}"
         url="${DB_CONNECTION_URL}"
         userid="${DB_USERNAME}"
         password="${DB_PASSWORD}">
      <transaction src="${secu-log.dir}/addTestUser.sql" />
      <classpath>
        <fileset dir="${cacore.sdk.dir}/system/lib">
          <include name="*.jar" />
        </fileset>
      </classpath>
    </sql>
  </target>
  <target name="dbcreate"
          depends="dbcreate-add-tables,dbcreate-add-testuser"
          description="creates the default tables">
  </target>
  <target name="dbbackup"
          description="makes a copy of the current biobank2 database">
    <echo message="running scripts/dbbackup..." />
    <exec executable="scripts/dbbackup"
          failonerror="true"
          output="biobank2.sql">
      <arg line="${database.host} ${database.username} ${database.password} ${database.name}" />
    </exec>
  </target>

  <fileset id="modelextender.class.files"
           dir="${eclipse.proj.dir.tools}/output">
    <include name="**/tools/modelextender/*.class" />
    <include name="**/tools/modelumlparser/*.class" />
    <include name="**/tools/utils/*.class" />
    <include name="**/common/util/TypeReference.class" />
    <include name="**/common/wrappers/Property.class" />
  </fileset>

  <target name="build-modelextender" depends="sdk">
    <echo message="Building model peer tool" />
    <dependset>
      <srcfilelist dir="${cacore.sdk.dir}/output/biobank2/build/jar"
                   files="biobank2-beans.jar" />
      <targetfileset refid="modelextender.class.files" />
    </dependset>
    <mkdir dir="${eclipse.proj.dir.tools}/output" />
    <javac debug="on"
           debuglevel="source,lines,vars"
           destdir="${eclipse.proj.dir.tools}/output"
           source="1.6"
           target="1.6"
           includeantruntime="false">
      <src path="${eclipse.proj.dir.tools}/src" />
      <src path="${eclipse.proj.dir.common}/src" />
      <include name="**/tools/modelextender/*.java" />
      <include name="**/tools/modelumlparser/*.java" />
      <include name="**/tools/utils/*.java" />
      <include name="**/common/util/TypeReference.java" />
      <include name="**/common/wrappers/Property.java" />
      <classpath>
        <pathelement location="${req.jars.dir}/jargs.jar" />
        <pathelement location="${req.jars.dir}/commons-lang-2.4.jar" />
        <pathelement location="${cacore.sdk.dir}/system/lib/log4j-1.2.14.jar" />
      </classpath>
    </javac>
  </target>

  <target name="check-run-modelextender">
    <uptodate property="modelextender.uptodate"
              targetfile="${eclipse.proj.dir.common}/src/edu/ualberta/med/biobank/common/peer/SitePeer.java">
      <srcfiles dir="${cacore.sdk.dir}/output/biobank2/build/jar"
                includes="biobank2-beans.jar" />
      <srcfiles refid="modelextender.class.files" />
    </uptodate>
  </target>

  <target name="modelextender"
          depends="build-modelextender,check-run-modelextender"
          unless="modelextender.uptodate"
          description="Builds wrapper peer classes based on UML logical model.">
    <java classname="edu.ualberta.med.biobank.tools.modelextender.ModelExtender"
          failonerror="true"
          fork="true">
      <jvmarg value="-Dlog4j.configuration=file:${eclipse.proj.dir.tools}/conf/log4j.properties" />
      <arg value="${model.proj.dir}/biobank2.uml" />
      <arg value="${eclipse.proj.dir.common}/src/edu/ualberta/med/biobank/common/peer" />
      <arg value="${eclipse.proj.dir.common}/src/edu/ualberta/med/biobank/common/wrappers" />
      <classpath>
        <pathelement location="${req.jars.dir}/jargs.jar" />
        <pathelement location="${cacore.sdk.dir}/system/lib/log4j-1.2.14.jar" />
        <pathelement location="${eclipse.proj.dir.tools}/output" />
      </classpath>
    </java>
  </target>

  <fileset id="validators.class.files"
           dir="${eclipse.proj.dir.tools}/output-validators">
    <include name="**/tools/validator/*.class" />
    <include name="**/tools/modelumlparser/*.class" />
    <include name="**/tools/utils/*.class" />
  </fileset>

  <!--
    build-validators uses a different destination directory from build-hbmstrings and
    build-modelextender due to dependency restrictions
  -->
  <target name="build-validators" depends="cacore-untar">
    <echo message="Building hibernate validators generation tool" />
    <dependset>
      <srcfilelist dir="${model.proj.dir}" files="biobank2.uml" />
      <targetfileset refid="validators.class.files" />
    </dependset>
    <mkdir dir="${eclipse.proj.dir.tools}/output-validators" />
    <copy includeemptydirs="false"
          todir="${eclipse.proj.dir.tools}/output-validators">
      <fileset dir="${eclipse.proj.dir.tools}/src">
        <exclude name="**/*.launch" />
        <exclude name="**/*.java" />
      </fileset>
    </copy>
    <javac debug="on"
           debuglevel="source,lines,vars"
           destdir="${eclipse.proj.dir.tools}/output-validators"
           source="1.6"
           target="1.6"
           includeantruntime="false">
      <src path="${eclipse.proj.dir.tools}/src" />
      <include name="**/tools/validator/*.java" />
      <include name="**/tools/modelumlparser/*.java" />
      <include name="**/tools/utils/*.java" />
      <classpath>
        <pathelement location="${req.jars.dir}/jargs.jar" />
        <pathelement location="${req.jars.dir}/commons-io-1.4.jar" />
        <pathelement location="${cacore.sdk.dir}/system/lib/log4j-1.2.14.jar" />
      </classpath>
    </javac>
  </target>

  <target name="check-run-validators">
    <uptodate property="validators.uptodate"
              targetfile="${cacore.sdk.dir}/conf/codegen/validator-extension-Config.xml">
      <srcfiles dir="${model.proj.dir}" includes="biobank2.uml" />
      <srcfiles refid="validators.class.files" />
    </uptodate>
  </target>

  <target name="validators"
          depends="build-validators,check-run-validators"
          unless="validators.uptodate"
          description="create the validators xml file used by cacore to generate the source code">
    <java classname="edu.ualberta.med.biobank.tools.validator.ValidatorGeneration"
          failonerror="true"
          fork="true">
      <jvmarg value="-Dlog4j.configuration=file:${eclipse.proj.dir.tools}/conf/log4j.properties" />
      <arg value="${model.proj.dir}/biobank2.uml" />
      <arg value="${cacore.sdk.dir}/conf/codegen/validator-extension-Config.xml" />
      <classpath>
        <pathelement location="${req.jars.dir}/jargs.jar" />
        <pathelement location="${req.jars.dir}/commons-io-1.4.jar" />
        <pathelement location="${cacore.sdk.dir}/system/lib/log4j-1.2.14.jar" />
        <pathelement location="${eclipse.proj.dir.tools}/output-validators" />
      </classpath>
    </java>
  </target>

  <fileset id="hbmstrings.class.files" dir="${eclipse.proj.dir.tools}/output">
    <include name="**/tools/hbmstrings/*.class" />
    <include name="**/tools/modelumlparser/*.class" />
    <include name="**/tools/utils/*.class" />
  </fileset>

  <target name="build-hbmstrings" depends="sdk" unless="hmbstrings.uptodate">
    <mkdir dir="${eclipse.proj.dir.tools}/output" />
    <dependset>
      <srcfilelist dir="${cacore.sdk.dir}/output/biobank2/build/jar"
                   files="biobank2-beans.jar" />
      <targetfileset refid="hbmstrings.class.files" />
    </dependset>
    <javac debug="on"
           debuglevel="source,lines,vars"
           srcdir="${eclipse.proj.dir.tools}/src"
           destdir="${eclipse.proj.dir.tools}/output"
           source="1.6"
           target="1.6"
           includeantruntime="false">
      <include name="**/tools/hbmstrings/*.java" />
      <include name="**/tools/modelumlparser/*.java" />
      <include name="**/tools/utils/*.java" />
      <classpath>
        <path id="biobank.tools.classpath">
          <fileset dir="${eclipse.proj.dir.tools}/lib">
            <include name="*.jar" />
          </fileset>
        </path>
        <pathelement location="${cacore.sdk.dir}/system/lib/log4j-1.2.14.jar" />
      </classpath>
    </javac>
    <touch file="${eclipse.proj.dir.tools}/output/build.timestamp" />
  </target>

  <target name="check-run-hbmstrings">
    <uptodate property="hbmstrings.uptodate"
              targetfile="${eclipse.proj.dir.common}/src/edu/ualberta/med/biobank/common/VarCharLengths.java">

      <srcfiles dir="${cacore.sdk.dir}/output/biobank2/build/jar"
                includes="biobank2-beans.jar" />
      <srcfiles refid="hbmstrings.class.files" />
    </uptodate>
  </target>

  <target name="hbmstrings"
          depends="build-hbmstrings,check-run-hbmstrings"
          unless="hbmstrings.uptodate"
          description="Adds the length='#' field into *.hbm.xml files, references the biobank.uml file for the VARCHAR(#)">
    <echo message="running HBM string fixing tool" />
    <dependset>
      <srcfilelist dir="${cacore.sdk.dir}/output/biobank2/build/jar"
                   files="biobank2-beans.jar" />
      <targetfilelist dir="${eclipse.proj.dir.common}/src/edu/ualberta/med/biobank/common"
                      files="VarCharLengths.java" />
    </dependset>
    <java classname="edu.ualberta.med.biobank.tools.hbmstrings.HbmStrings"
          failonerror="true"
          fork="true">
      <jvmarg value="-Dlog4j.configuration=file:${eclipse.proj.dir.tools}/conf/log4j.properties" />
      <arg value="${model.proj.dir}/biobank2.uml" />
      <arg value="${cacore.sdk.dir}/output/biobank2/src/edu/ualberta/med/biobank/model" />
      <arg value="${eclipse.proj.dir.common}/src/edu/ualberta/med/biobank/common/VarCharLengths.java.template" />
      <classpath>
        <pathelement location="${req.jars.dir}/jargs.jar" />
        <pathelement location="${req.jars.dir}/commons-io-1.4.jar" />
        <pathelement location="${cacore.sdk.dir}/system/lib/log4j-1.2.14.jar" />
        <pathelement location="${eclipse.proj.dir.tools}/output" />
      </classpath>
    </java>
  </target>

  <target name="build-common-project"
          depends="sdk-files,hbmstrings,modelextender">
    <echo message="Building common project" />
    <mkdir dir="${eclipse.proj.dir.common}/output" />
    <copy includeemptydirs="false" todir="${eclipse.proj.dir.common}/output">
      <fileset dir="${eclipse.proj.dir.common}/src">
        <exclude name="**/*.launch" />
        <exclude name="**/*.java" />
      </fileset>
    </copy>
    <javac debug="true"
           debuglevel="source,lines,vars"
           destdir="${eclipse.proj.dir.common}/output"
           source="1.6"
           target="1.6"
           includeantruntime="false">
      <src path="${eclipse.proj.dir.common}/src" />
      <classpath refid="biobank.common.build.classpath" />
    </javac>
  </target>

  <target name="package-codegen-orm"
          description="REDO:: Packages the generated ORM and bean artifacts">
    <jar destfile="${cacore.sdk.dir}\${build.jar.dir}\${orm.file}"
         basedir="${cacore.sdk.dir}\${output.src.dir}">
      <manifest>
        <attribute name="Generated-By" value="caCORE SDK Code Generator" />
        <attribute name="Version" value="${VERSION}" />
      </manifest>
      <include name="**/*.hbm.xml" />
      <include name="*.cfg.xml" />
      <include name="ehcache.xml" />
      <exclude name="${csm.security.config.file}" />
    </jar>
  </target>


  <!-- copied from sdk build.xml -->
  <target name="package-webapp-orm"
          depends="package-codegen-orm,build-common-project">
    <war destfile="${cacore.sdk.dir}\${package.system.dir}\${PROJECT_NAME}.war"
         webxml="${cacore.sdk.dir}\${build.conf.web-inf.dir}\web.xml">
      <manifest>
        <attribute name="Generated-By"
                   value="biobank2 caCORE SDK Code Generator" />
        <attribute name="Version" value="${VERSION}" />
      </manifest>
      <lib dir="${cacore.sdk.dir}\${system.dir}\${system.dist.dir}"
           includes="*.jar" />
      <lib dir="${cacore.sdk.dir}\${writable-api.dir}\${writable-api.dist.dir}"
           includes="*.jar">
        <exclude name="${read-api-exclude-list}" />
      </lib>
      <lib dir="${cacore.sdk.dir}\${build.jar.dir}" includes="${bean.file}" />
      <lib dir="${cacore.sdk.dir}\${build.jar.dir}" includes="${orm.file}" />
      <lib dir="${cacore.sdk.dir}\${system.dir}\${system.lib.dir}"
           includes="*.jar">
        <exclude name="${server-exclude-commons-logging}" />
        <exclude name="${server-exclude-log4j}" />
        <exclude name="servlet.jar" />
        <exclude name="xercesImpl*.*" />
        <exclude name="cog*.*" />
      </lib>
      <lib dir="${cacore.sdk.dir}\${grid-jaas.dir}\${grid-jaas.dist.dir}"
           includes="*.*"
           excludes="${grid-jaas.file.output.jaas.jndibinder.name}" />
      <fileset dir="${cacore.sdk.dir}\${build.conf.system.web.dir}">
        <include name="**/*" />
        <exclude name="**/web.xml" />
        <exclude name="${server-exclude-classes-list}" />
      </fileset>
      <fileset dir="${cacore.sdk.dir}\${system.dir}\${system.web.dir}">
        <include name="**/*" />
      </fileset>
      <fileset dir="${cacore.sdk.dir}\${build.dir}">
        <include name="docs/**/*" />
      </fileset>
      <classes dir="${cacore.sdk.dir}\${output.src.dir}">
        <include name="${csm.security.config.file}" />
        <include name="${csm.ehcache.file}" />
        <include name="${clm.object.state.logger.config}" />
      </classes>
      <classes dir="${eclipse.proj.dir.common}/output">
        <exclude name="**/client/**" />
      </classes>
      <webinf dir="${cacore.sdk.dir}\${output.src.dir}">
        <include name="server-config.wsdd" />
      </webinf>
    </war>
  </target>

  <target name="clean-jars" description="deletes jars from eclipse projects">
    <delete>
      <fileset dir="${eclipse.proj.dir}/lib" includes="**/*.jar" />
      <fileset dir="${eclipse.proj.dir.common}/lib" includes="**/*.jar" />
    </delete>
  </target>

  <target name="clean"
          depends="clean-tests,clean-jars,clean-caCore"
          description="cleans caCORE SDK and deletes jars from eclipse projects">
    <delete dir="${eclipse.proj.dir.common}/output" />
    <delete dir="${eclipse.proj.dir.tools}/output-validators" />
    <delete dir="${eclipse.proj.dir.tools}/output" />
    <delete file="${cacore.sdk.dir}/conf/codegen/validator-extension-Config.xml" />
    <delete>
      <fileset dir="${eclipse.proj.dir.common}/src/edu/ualberta/med/biobank/common/peer"
      includes="*Peer.java"/>
    </delete>
    <delete>
      <fileset dir="${eclipse.proj.dir.common}/src/edu/ualberta/med/biobank/common/wrappers/base"
      includes="*BaseWrapper.java"/>
    </delete>
  </target>

  <target name="clean-caCore" if="cacore.sdk.available">
    <ant dir="${cacore.sdk.dir}" target="clean" inheritRefs="false" />
  </target>


  <!-- JUnit -->

  <property name="test.output" location="testing" />
  <property name="test.output.raw" value="${test.output}/raw" />
  <property name="test.build.dir" value="${eclipse.proj.dir.junit}/output" />

  <path id="common.class.path">
    <fileset dir="${eclipse.proj.dir.common}/lib/client">
      <include name="*.jar" />
    </fileset>
  </path>
  <path id="test.class.path">
    <pathelement location="${test.build.dir}" />
  </path>

  <target name="clean-test-results">
    <delete dir="${test.output}" />
  </target>

  <target name="clean-tests" depends="clean-test-results">
    <delete dir="${test.build.dir}" />
  </target>

  <target name="prepare">
    <mkdir dir="${test.build.dir}" />
    <mkdir dir="${test.output}" />
    <mkdir dir="${test.output.raw}" />
  </target>

  <target name="tests-compile" depends="build-common-project,prepare">
    <javac srcdir="${eclipse.proj.dir.junit}/src"
           destdir="${test.build.dir}"
           debug="true"
           debuglevel="lines,source"
           includeantruntime="false">
      <classpath>
        <pathelement location="${eclipse.proj.dir.common}/output" />
        <pathelement location="${eclipse.proj.dir.common}/lib/client" />
      </classpath>
      <classpath refid="biobank.common.build.classpath" />
    </javac>
  </target>

  <fileset id="testcase.files" dir="${eclipse.proj.dir.junit}/src">
    <include name="**/Test*.java" />
    <exclude name="**/speed/**" />
    <exclude name="**/TestCommon.java" />
    <exclude name="**/TestDatabase.java" />
    <exclude name="**/TestFunctionalities.java" />
    <exclude name="**/TestReportsOnExistingData.java" />
    <exclude name="**/AllTests.java" />
  </fileset>

  <target name="test" depends="tests-compile" description="executes test cases">
    <junit printsummary="yes" haltonfailure="no" showoutput="yes" fork="true">
      <classpath refid="test.class.path" />
      <classpath refid="biobank.common.run.classpath" />
      <sysproperty key="server" value="http://localhost:8080" />
      <formatter usefile="yes" type="xml" />
      <test name="${testcase}" todir="${test.output.raw}" if="testcase" />
      <batchtest todir="${test.output.raw}" unless="testcase">
        <fileset refid="testcase.files" />
      </batchtest>
    </junit>
    <junitreport todir="${test.output}">
      <fileset dir="${test.output.raw}">
        <include name="TEST-*.xml" />
      </fileset>
      <report format="noframes" todir="${test.output}/html" />
    </junitreport>
    <echo message="test report: file://${test.output}/html/junit-noframes.html" />
  </target>

  <property name="emma.dir" value="${req.jars.dir}" />
  <path id="emma.lib">
    <pathelement location="${emma.dir}/emma.jar" />
    <pathelement location="${emma.dir}/emma_ant.jar" />
  </path>

  <target name="emma"
          description="turns on EMMA's on-the-fly instrumentation mode">
    <property name="emma.enabled" value="true" />
  </target>

  <target name="test-emma"
          depends="tests-compile"
          description="executes test cases with code coverage">
    <delete file="${test.output}/coverage.emma" />
    <junit printsummary="yes" haltonfailure="no" showoutput="yes" fork="true">
      <classpath refid="biobank.common.run.classpath" />
      <classpath refid="test.class.path" />
      <classpath refid="emma.lib" />
      <formatter usefile="yes" type="brief" />
      <formatter type="xml" />
      <test name="${testcase}" todir="${test.output.raw}" if="testcase" />
      <batchtest todir="testing/raw" unless="testcase">
        <fileset refid="testcase.files" />
      </batchtest>
      <jvmarg value="-Xbootclasspath/a:${emma.dir}/emma.jar" />
      <jvmarg value="emmarun" />
      <jvmarg value="-out" />
      <jvmarg value="${test.output}/coverage.emma" />
      <jvmarg value="-raw" />
      <jvmarg value="-merge" />
      <jvmarg value="yes" />
      <jvmarg value="-ix" />
      <jvmarg value="edu.ualberta.med.biobank.common*" />
    </junit>
    <junitreport todir="${test.output}">
      <fileset dir="${test.output.raw}">
        <include name="TEST-*.xml" />
      </fileset>
      <report format="noframes" todir="${test.output}/html" />
    </junitreport>
    <java classname="emma" fork="true" failonerror="true">
      <arg value="report" />
      <arg value="-r" />
      <arg value="html" />
      <arg value="-sp" />
      <arg value="eclipse_ws/biobank.common/src" />
      <arg value="-in" />
      <arg value="testing/coverage.emma" />
      <classpath>
        <pathelement path="${emma.dir}/emma.jar" />
      </classpath>
    </java>
    <echo message="test report: file://${test.output}/html/junit-noframes.html" />
    <echo message="coverage report: file://${converage.output}/index.html" />
  </target>


  <target name="eclipse.home.env">
    <fail unless="env.ECLIPSE_HOME"
          message="ECLIPSE_HOME environment variable not defined. It should define a path to an eclipse installation containing the Delta Pack." />
  </target>


  <target name="product" depends="eclipse.home.env,deploy-eclipse">
    <property name="buildDirectory" value="${product.dir}/buildDirectory" />
    <delete dir="${buildDirectory}" />
    <copy todir="${buildDirectory}/plugins/biobank2">
      <fileset dir="${eclipse.workspace.dir}/biobank2" />
    </copy>
    <copy todir="${buildDirectory}/plugins/scannerConfig">
      <fileset dir="${eclipse.workspace.dir}/scannerConfig" />
    </copy>
    <copy todir="${buildDirectory}/plugins/biobank.common">
      <fileset dir="${eclipse.workspace.dir}/biobank.common" />
    </copy>
    <copy todir="${buildDirectory}/plugins/sampleProcessingRobot">
      <fileset dir="${eclipse.workspace.dir}/sampleProcessingRobot" />
    </copy>
    <copy todir="${buildDirectory}/features/biobank2.feature.core">
      <fileset dir="${eclipse.workspace.dir}/biobank2.feature.core" />
    </copy>
    <copy todir="${buildDirectory}/features/biobank2.feature.platform">
      <fileset dir="${eclipse.workspace.dir}/biobank2.feature.platform" />
    </copy>
    <!-- get current org.eclipse.equinox.launcher jar. If find more than one, will use the last one in the list (should be the last version)-->
    <fileset id="launcher.id.all"
             dir="${env.ECLIPSE_HOME}/plugins/"
             includes="org.eclipse.equinox.launcher_*.jar" />
    <last id="launcher.id" count="1">
      <fileset refid="launcher.id.all" />
    </last>
    <!-- get current org.eclipse.pde.build folder. If find more than one, will use the last one in the list (should be the last version) -->
    <fileset id="pde.build.id.all"
             dir="${env.ECLIPSE_HOME}/plugins/"
             includes="org.eclipse.pde.build_*/scripts/productBuild/productBuild.xml" />
    <last id="pde.build.id" count="1">
      <fileset refid="pde.build.id.all" />
    </last>
    <!-- launch product creation -->
    <java classpath="${toString:launcher.id}"
          classname="org.eclipse.equinox.launcher.Main"
          failonerror="true"
          fork="true">
      <arg line="-application org.eclipse.ant.core.antRunner" />
      <arg line="-buildfile ${toString:pde.build.id}" />
      <arg line="-Dbuilder=${product.dir}" />
      <!-- product.dir is used in product/customTarget.xml -->
      <arg line="-Dproduct.dir=${product.dir}" />
      <!-- instead of fixed paths in product/build.properties: -->
      <arg line="-Dproduct=${eclipse.proj.dir}/biobank2.product" />
      <arg line="-DbuildDirectory=${product.dir}/buildDirectory" />
      <arg line="-DbaseLocation=${env.ECLIPSE_HOME}" />
      <arg line="-Djava.client.version.num=${java.client.version.num}" />
    </java>
    <antcall target="updateSiteMetadata" />
  </target>

  <target name="updateSiteMetadata" depends="eclipse.home.env">
    <property name="buildDirectory" value="${product.dir}/buildDirectory" />
    <property name="updateSiteFolder" value="${buildDirectory}/updateSite" />
    <copy todir="${updateSiteFolder}/features/">
      <fileset dir="${buildDirectory}/buildRepo/features/" />
    </copy>
    <copy todir="${updateSiteFolder}/plugins/">
      <fileset dir="${buildDirectory}/buildRepo/plugins/" />
    </copy>
    <fileset id="featureJar.id"
             dir="${updateSiteFolder}/features/"
             includes="biobank2.feature.core_*.jar" />
    <property name="featureJar" refid="featureJar.id" />
    <taskdef resource="net/sf/antcontrib/antcontrib.properties">
      <classpath>
        <pathelement location="${product.dir}/ant-contrib/ant-contrib-1.0b3.jar" />
      </classpath>
    </taskdef>
    <propertyregex property="featureVersion"
                   input="${featureJar}"
                   regexp="biobank2.feature.core_(.*)\.jar"
                   select="\1"
                   casesensitive="true" />
    <copy file="${product.dir}/site.xml"
          tofile="${updateSiteFolder}/site.xml" />
    <replace file="${updateSiteFolder}/site.xml"
             token="@VERSION@"
             value="${featureVersion}" />


    <!-- get current org.eclipse.equinox.launcher jar. If find more than one, will use the last one in the list (should be the last version)-->
    <fileset id="launcher.id.all"
             dir="${env.ECLIPSE_HOME}/plugins/"
             includes="org.eclipse.equinox.launcher_*.jar" />
    <last id="launcher.id" count="1">
      <fileset refid="launcher.id.all" />
    </last>
    <java classpath="${toString:launcher.id}"
          classname="org.eclipse.equinox.launcher.Main"
          failonerror="true"
          fork="true">
      <arg line="-application org.eclipse.equinox.p2.publisher.UpdateSitePublisher" />
      <arg line="-source ${updateSiteFolder}" />
      <arg line="-compress" />
      <arg line="-publishArtifacts" />
      <arg line="-consoleLog" />
      <arg line="-artifactRepository file:${updateSiteFolder}" />
      <arg line="-metadataRepository file:${updateSiteFolder}" />
    </java>
  </target>


</project>
