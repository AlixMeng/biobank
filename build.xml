<?xml version="1.0" encoding="utf-8"?>
<project name="biobank" basedir="." default="deploy">
  <!--
      Overall build file
      use command "ant -projecthelp" to display the targets.

Local Variables:
compile-command: "export JBOSS_HOME=$HOME/apps/jboss-4.0.5.GA"
End:
  -->

  <exec executable="hostname" outputproperty="host.name">
    <arg value="-f" />
  </exec>

  <property environment="env" />
  <property name="doxygen" location="/usr/bin/doxygen" />
  <property name="xsltproc" location="/usr/bin/xsltproc" />

  <!-- TODO: move as many properties as possible into build.properties -->
  <!-- TODO: add tasks to push database properties to various files -->
  <!-- TODO: create a cacore directory with all the cacore stuff in it
       that we can throw into the war file and use to create the database -->
  <property file="build.properties" />

  <!-- must use a property with a LOCATION attribute because it is converted
       to be an absolute value, which the product builder seems to require in
       order to load its build.properties in product/build.properties -->
  <property name="product.dir" location="product" />
  <property name="buildDirectory" value="${product.dir}/buildDirectory" />

  <import file="build-db.xml"/>

  <condition property="perl" value="perl" else="/usr/bin/perl">
    <os family="windows" />
  </condition>
  <condition property="debugFileExtension" value="-debug" else="">
    <equals arg1="${debug}" arg2="true" casesensitive="false" trim="true" />
  </condition>

  <!-- TODO: someday, does client need all keystores? -->
  <condition property="isHostAicmlMed">
    <equals arg1="${host.name}"
            arg2="aicml-med"
            casesensitive="true"
            trim="true" />
  </condition>
  <condition property="isHostAicml5">
    <equals arg1="${host.name}"
            arg2="aicml5"
            casesensitive="true"
            trim="true" />
  </condition>
  <condition property="isHostCbsr">
    <equals arg1="${host.name}"
            arg2="cbsr.med.ualberta.ca"
            casesensitive="true"
            trim="true" />
  </condition>
  <condition property="isHostCbsrTraining">
    <equals arg1="${host.name}"
            arg2="cbsr-training"
            casesensitive="true"
            trim="true" />
  </condition>
  <condition property="isHostLocal">
    <and>
      <isfalse value="${isHostAicmlMed}" />
      <isfalse value="${isHostAicml5}" />
      <isfalse value="${isHostCbsr}" />
      <isfalse value="${isHostCbsrTraining}" />
    </and>
  </condition>

  <path id="biobank.common.build.classpath">
    <fileset dir="${req.jars.dir}">
      <include name="*.jar" />
    </fileset>
  </path>

  <!-- for tests -->
  <path id="biobank.common.run.classpath">
    <path refid="biobank.common.build.classpath" />
    <pathelement location="${eclipse.proj.dir.common}/output" />
  </path>

  <!-- Eclipse -->
  <target name="biobank-product-version-modify">
    <tempfile property="tmp.file" destdir="${java.io.tmpdir}"
              prefix="biobank2.product" />
    <xslt in="${eclipse.proj.dir}/biobank2.product" out="${tmp.file}"
          style="scripts/biobank-product.xsl">
      <param name="version" expression="${java.client.version.num}" />
    </xslt>
    <copy file="${tmp.file}" tofile="${eclipse.proj.dir}/biobank2.product"
          overwrite="true"/>
  </target>

  <target name="biobank-feature-core-version-modify">
    <tempfile property="tmp.file" destdir="${java.io.tmpdir}"
              prefix="biobank2.feature.core" />
    <xslt in="${eclipse.workspace.dir}/biobank2.feature.core/feature.xml" out="${tmp.file}"
          style="scripts/biobank-feature.xsl">
      <param name="version" expression="${java.client.version.num}" />
    </xslt>
    <copy file="${tmp.file}" tofile="${eclipse.workspace.dir}/biobank2.feature.core/feature.xml"
          overwrite="true"/>
  </target>

  <target name="biobank-feature-platform-version-modify">
    <tempfile property="tmp.file" destdir="${java.io.tmpdir}"
              prefix="biobank2.feature.platform" />
    <xslt in="${eclipse.workspace.dir}/biobank2.feature.platform/feature.xml" out="${tmp.file}"
          style="scripts/biobank-feature.xsl">
      <param name="version" expression="${java.client.version.num}" />
    </xslt>
    <copy file="${tmp.file}" tofile="${eclipse.workspace.dir}/biobank2.feature.platform/feature.xml"
          overwrite="true"/>
  </target>

  <target name="biobank-version-modify">
    <antcall target="biobank-product-version-modify" />
    <antcall target="biobank-feature-core-version-modify" />
    <antcall target="biobank-feature-platform-version-modify" />
  </target>

  <target name="java-client-manifest">
    <manifest file="${eclipse.proj.dir}/META-INF/MANIFEST.MF" mode="update">
      <attribute name="Bundle-Version" value="${java.client.version.num}" />
    </manifest>
    <fixcrlf srcdir="${eclipse.proj.dir}/META-INF"
             eol="lf"
             eof="asis"
             encoding="ISO-8859-1">
      <include name="**/*.MF" />
    </fixcrlf>
    <propertyfile file="eclipse_ws/biobank2/about.mappings">
      <entry key="0" value="${java.client.version.num}" />
    </propertyfile>
  </target>

  <target name="deploy-eclipse"
          depends="java-client-manifest,biobank-version-modify"
          description="deploys the caCORE SDK beans to the eclipse project">
    <copy todir="${eclipse.proj.dir.common}/lib/client" overwrite="true">
      <fileset dir="${req.jars.dir}">
        <include name="acegi-security-1.0.4.jar" />
        <include name="antlr-2.7.6.jar" />
        <include name="asm.jar" />
        <include name="axis.jar" />
        <include name="caGrid-CQL-cql.1.0-1.2.jar" />
        <include name="castor-1.0.2.jar" />
        <include name="cglib-2.1.3.jar" />
        <include name="cog-jglobus.jar" />
        <include name="commons-codec-1.3.jar" />
        <include name="commons-collections-3.2.jar" />
        <include name="commons-collections-3.2.jar" />
        <include name="commons-discovery-0.2.jar" />
        <include name="commons-lang-2.4.jar" />
        <include name="commons-logging-1.1.jar" />
        <include name="dom4j-1.6.1.jar" />
        <include name="hibernate-jpa-2.0-api-1.0.1.Final.jar" />
        <include name="hibernate-validator-4.2.0.Final.jar" />
        <include name="hibernate3.jar" />
        <include name="javassist-3.12.0.GA.jar" />
        <include name="jaxrpc.jar" />
        <include name="jta-1.1.jar" />
        <include name="log4j-1.2.14.jar" />
        <include name="mysql-connector-java-5.1.15-bin.jar" />
	<include name="ognl-2.6.7.jar" />
        <include name="saaj.jar" />
        <include name="sdk-client-framework.jar" />
        <include name="sdk-grid-remoting.jar" />
        <include name="sdk-security.jar" />
        <include name="sdk-writable-client-framework.jar" />
        <include name="slf4j-api-1.6.1.jar" />
        <include name="slf4j-nop-1.6.4.jar" />
        <include name="spring.jar" />
        <include name="validation-api-1.0.0.GA.jar" />
        <include name="wsdl4j-1.5.1.jar" />
        <include name="xercesImpl.jar" />
        <include name="xpp3-1.1.3.4.C.jar" />
        <include name="xstream-1.3.1.jar" />
      </fileset>
    </copy>
    <copy todir="${eclipse.proj.dir.common}/lib/server" overwrite="true">
      <fileset dir="${req.jars.dir}">
        <include name="csmapi-4.1.jar" />
        <include name="jta-1.1.jar" />
        <include name="sdk-core.jar" />
        <include name="sdk-writable-core.jar" />
      </fileset>
    </copy>
    <copy todir="${eclipse.proj.dir.gui.common}/lib" overwrite="true">
      <fileset dir="${req.jars.dir}">
        <include name="commons-beanutils-1.8.0.jar" />
        <include name="commons-collections-3.2.jar" />
        <include name="commons-io-1.4.jar" />
        <include name="commons-digester-1.7.jar" />
        <include name="commons-javaflow-20060411.jar" />
        <include name="commons-logging-1.1.jar" />
        <include name="iText-2.1.7.jar" />
        <include name="jasperreports-4.0.1.jar" />
        <include name="jdt-compiler-3.1.1.jar" />
        <include name="DynamicJasper-3.0.14.jar" />
      </fileset>
    </copy>
    <copy todir="${eclipse.proj.dir.mvp}/lib" overwrite="true">
      <fileset dir="${req.jars.dir}">
        <include name="aopalliance.jar" />
        <include name="guice-3.0.jar" />
        <include name="gwt-pectin-0.8.1.jar" />
        <include name="gwt-user.jar" />
        <include name="javax.inject.jar" />
        <include name="peaberry-1.2.jar" />
      </fileset>
    </copy>
    <copy todir="${eclipse.proj.dir}/lib" overwrite="true">
      <fileset dir="${req.jars.dir}">
        <include name="gluegen.jar" />
        <include name="jdom.jar" />
        <include name="mailapi.jar" />
        <include name="smtp.jar" />
        <include name="spiffy-all-0.05.jar" />
        <include name="SuperCSV-1.52.jar" />
      </fileset>
    </copy>
    <copy todir="${eclipse.proj.dir.tools}/lib" overwrite="true">
      <fileset dir="${req.jars.dir}">
        <include name="commons-io-1.4.jar" />
        <include name="jargs.jar" />
        <include name="mysql-connector-java-5.1.15-bin.jar" />
        <include name="spiffy-all-0.05.jar" />
        <include name="SuperCSV-1.52.jar" />
      </fileset>
    </copy>
    <copy todir="${eclipse.proj.dir.tests}/src" overwrite="true">
      <!-- File needed in the test project to call csm api methods -->
      <fileset file="sdk_conf/biobank.csm.new.hibernate.cfg.xml" />
    </copy>
    <copy todir="${eclipse.proj.dir.tests}/lib" overwrite="true">
      <fileset dir="${req.jars.dir}">
        <include name="c3p0-0.9.0.jar" />
        <include name="clm-4.1.jar" />
	<include name="dom4j-1.4.jar" />
	<include name="ehcache-1.2.2.jar" />
	<include name="jta-1.1.jar" />
        <include name="mockito-all-1.9.0-rc1.jar" />
      </fileset>
    </copy>
    <copy todir="${eclipse.proj.dir.tools}/lib" overwrite="true">
      <fileset dir="${req.jars.dir}">
        <include name="log4j-1.2.14.jar" />
      </fileset>
    </copy>
  </target>

  <!-- JBoss -->
  <target name="check-jboss-uptodate">
    <uptodate property="jboss.uptodate"
              targetfile="${env.JBOSS_HOME}/server/default/deploy/biobank.war"
              srcfile="${war.file}" />
  </target>

  <!-- TODO: require as a single target to update the keyfile -->
  <target name="hostAicmlMed" if="isHostAicmlMed">
    <copy file="${secu-log.dir}/jboss/${host.name}.cs.ualberta.ca.keystore"
          tofile="${env.JBOSS_HOME}/server/default/conf/biobank.keystore"
          overwrite="true" />
  </target>
  <target name="hostAicml5" if="isHostAicml5">
    <copy file="${secu-log.dir}/jboss/${host.name}.cs.ualberta.ca.keystore"
          tofile="${env.JBOSS_HOME}/server/default/conf/biobank.keystore"
          overwrite="true" />
  </target>
  <target name="hostCbsr" if="isHostCbsr">
    <copy file="${secu-log.dir}/jboss/${host.name}.keystore"
          tofile="${env.JBOSS_HOME}/server/default/conf/biobank.keystore"
          overwrite="true" />
  </target>
  <target name="HostBiobank1" if="isHostBiobank1">
    <copy file="${secu-log.dir}/jboss/biobank.keystore"
          tofile="${env.JBOSS_HOME}/server/default/conf/biobank.keystore"
          overwrite="true" />
  </target>
  <target name="hostCbsrTraining" if="isHostCbsrTraining">
    <copy file="${secu-log.dir}/jboss/${host.name}.keystore"
          tofile="${env.JBOSS_HOME}/server/default/conf/biobank.keystore"
          overwrite="true" />
  </target>
  <target name="hostLocal" if="isHostLocal">
    <copy file="${secu-log.dir}/jboss/localhost.keystore"
          tofile="${env.JBOSS_HOME}/server/default/conf/biobank.keystore"
          overwrite="true" />
  </target>

  <!-- version number on server side -->
  <target name="server-manifest">
    <manifest file="${eclipse.proj.dir.common}/META-INF/MANIFEST.MF"
              mode="update">
      <attribute name="Bundle-Version" value="${server.version.num}" />
    </manifest>
    <fixcrlf srcdir="${eclipse.proj.dir.common}/META-INF"
             eol="lf"
             eof="asis"
             encoding="ISO-8859-1">
      <include name="**/*.MF" />
    </fixcrlf>
    <propertyfile file="${eclipse.proj.dir.common}/src/edu/ualberta/med/biobank/server/applicationservice/version.properties">
      <entry key="server.version" value="${server.version.num}" />
    </propertyfile>
  </target>

  <target name="jboss.home.env">
    <fail unless="env.JBOSS_HOME"
          message="JBOSS_HOME environment variable not defined" />
  </target>

  <target name="deploy-jboss"
          depends="jboss.home.env,package-webapp,check-jboss-uptodate,hostAicmlMed,hostAicml5,hostCbsr,hostCbsrTraining,hostLocal"
          description="deploys the caCORE SDK webapp to JBoss"
          unless="jboss.uptodate">
    <copy file="${secu-log.dir}/jboss/login-config.xml"
          tofile="${env.JBOSS_HOME}/server/default/conf/login-config.xml"
          overwrite="true" />
    <copy file="${secu-log.dir}/jboss/server${debugFileExtension}.xml"
          tofile="${env.JBOSS_HOME}/server/default/deploy/jbossweb-tomcat55.sar/server.xml"
          overwrite="true" />
    <!-- for compatibility: this file has been split -->
    <delete file="${env.JBOSS_HOME}/server/default/deploy/mysql-ds.xml" />
    <copy file="${secu-log.dir}/jboss/upt-ds.xml"
          tofile="${env.JBOSS_HOME}/server/default/deploy/upt-ds.xml"
          overwrite="true" />
    <copy file="${secu-log.dir}/jboss/upt.war"
          tofile="${env.JBOSS_HOME}/server/default/deploy/upt.war"
          overwrite="true" />
    <delete includeemptydirs="true">
      <fileset dir="${env.JBOSS_HOME}/server/default/deploy">
        <!-- TODO: fix this? -->
        <include name="biobank*.war"/>
      </fileset>
    </delete>
    <copy file="${war.file}"
          tofile="${env.JBOSS_HOME}/server/default/deploy/biobank.war"
          overwrite="true" />
  </target>

  <target name="deploy" description="deploys to JBoss and Eclipse project">
    <!-- the order these are called in is important for now -->
    <antcall target="deploy-jboss" />
    <antcall target="deploy-eclipse" />
  </target>

  <target name="build-common-project"
          depends="server-manifest">
    <echo message="Building common project" />
    <mkdir dir="${eclipse.proj.dir.common}/output" />
    <copy includeemptydirs="false" todir="${eclipse.proj.dir.common}/output" overwrite="true">
      <fileset dir="${eclipse.proj.dir.common}/src">
        <exclude name="**/*.launch" />
        <exclude name="**/*.java" />
      </fileset>
    </copy>
    <javac debug="true"
           debuglevel="source,lines,vars"
           destdir="${eclipse.proj.dir.common}/output"
           source="1.6"
           target="1.6"
           includeantruntime="false">
      <src path="${eclipse.proj.dir.common}/src" />
      <classpath refid="biobank.common.build.classpath" />
    </javac>
  </target>

  <target name="package-webapp"
          depends="build-common-project">
    <mkdir dir="${output.dir}" />
    <war destfile="${war.file}"
         webxml="webapp/WEB-INF/web.xml">
      <manifest>
        <attribute name="Version" value="${server.version.num}" />
      </manifest>
      <!-- TODO: could put things in right folders (e.g. biobank.common), but for now
           just use an explicit list of what needs to be in the war -->
      <lib dir="${req.jars.dir}">
        <include name="acegi-security-1.0.4.jar" />
        <include name="antlr-2.7.6.jar" />
        <include name="asm.jar" />
        <include name="axis.jar" />
        <include name="backport-util-concurrent.jar" />
        <include name="c3p0-0.9.0.jar" />
        <include name="caGrid-CQL-cql.1.0-1.2.jar" />
        <include name="caGrid-data-common-1.2.jar" />
        <include name="caGrid-data-utils-1.2.jar" />
        <include name="caGrid-metadata-data-1.2.jar" />
        <include name="caGrid-sdkQuery4-beans-1.2.jar" />
        <include name="caGrid-sdkQuery4-processor-1.2.jar" />
        <include name="castor-1.0.2.jar" />
        <include name="cglib-2.1.3.jar" />
        <include name="clm-4.1.jar" />
        <include name="commons-codec-1.3.jar" />
        <include name="commons-collections-3.2.jar" />
        <include name="commons-discovery-0.2.jar" />
        <include name="commons-logging-1.1.jar" />
        <include name="csmapi-4.1.jar" />
        <include name="dom4j-1.4.jar" />
        <include name="dom4j-1.6.1.jar" />
        <include name="ehcache-1.2.2.jar" />
        <include name="freemarker-2.3.4.jar" />
        <include name="hibernate3.jar" />
        <include name="hibernate-jpa-2.0-api-1.0.1.Final.jar" />
        <include name="hibernate-validator-4.2.0.Final.jar" />
        <include name="javassist-3.12.0.GA.jar" />
        <include name="jaxrpc.jar" />
        <include name="jdom.jar" />
        <include name="jta-1.1.jar" />
        <include name="log4j-1.2.14.jar" />
        <include name="mmbase.jar" />
        <include name="mysql-connector-java-5.1.15-bin.jar" />
        <include name="ognl-2.6.7.jar" />
        <include name="ojdbc14.jar" />
        <include name="oro-2.0.8.jar" />
        <include name="saaj.jar" />
        <include name="sdk-client-framework.jar" />
        <include name="sdk-core.jar" />
        <include name="sdk-grid-jaas-executor.jar" />
        <include name="sdk-grid-jaas.jar" />
        <include name="sdk-security.jar" />
        <include name="sdk-web-framework.jar" />
        <include name="sdk-writable-client-framework.jar" />
        <include name="sdk-writable-core.jar" />
        <include name="sdk-ws-framework.jar" />
        <include name="slf4j-api-1.6.1.jar" />
        <include name="slf4j-nop-1.6.4.jar" />
        <include name="spring.jar" />
        <include name="struts2-api-2.0.1.jar" />
        <include name="struts2-core-2.0.1.jar" />
        <include name="validation-api-1.0.0.GA.jar" />
        <include name="wsdl4j-1.5.1.jar" />
        <include name="xwork-2.0-beta-1.jar" />
      </lib>
      <fileset dir="webapp">
        <exclude name="**/WEB-INF/**" />
      </fileset>
      <classes dir="${eclipse.proj.dir.common}/output">
        <exclude name="**/client/**" />
      </classes>
      <webinf dir="webapp/WEB-INF">
        <include name="**/*" />
	<exclude name="**/web.xml" />
      </webinf>
    </war>
  </target>

  <target name="clean-jars" description="deletes jars from eclipse projects">
    <delete>
      <!-- TODO: add lib folders from other projects? -->
      <fileset dir="${eclipse.proj.dir}/lib" includes="**/*.jar" />
      <fileset dir="${eclipse.proj.dir.mvp}/lib" includes="**/*.jar" />
      <fileset dir="${eclipse.proj.dir.gui.common}/lib" includes="**/*.jar" />
      <fileset dir="${eclipse.proj.dir.common}/lib" includes="**/*.jar" />
      <fileset dir="${eclipse.proj.dir.tests}/lib" includes="**/*.jar" />
      <fileset dir="${eclipse.proj.dir.tools}/lib" includes="**/*.jar" />
    </delete>
  </target>

  <target name="clean"
          depends="clean-tests,clean-jars,clean-product,clean-doxygen"
          description="cleans project output, tests, and jars">
    <delete dir="${eclipse.proj.dir.common}/output" />
    <delete dir="${eclipse.proj.dir.tools}/output-validators" />
    <delete dir="${eclipse.proj.dir.tools}/output" />
  </target>

  <!-- JUnit -->

  <property name="doxygen.output" location="docs/doxygen" />
  <property name="test.output" location="testing" />
  <property name="test.output.raw" value="${test.output}/raw" />
  <property name="test.build.dir" value="${eclipse.proj.dir.tests}/output" />

  <path id="common.class.path">
    <fileset dir="${eclipse.proj.dir.common}/lib/client">
      <include name="*.jar" />
    </fileset>
  </path>
  <path id="test.class.path">
    <pathelement location="${test.build.dir}" />
  </path>

  <target name="clean-test-results">
    <delete dir="${test.output}" />
  </target>

  <target name="clean-tests" depends="clean-test-results">
    <delete dir="${test.build.dir}" />
  </target>

  <target name="test-prepare">
    <mkdir dir="${test.build.dir}" />
    <mkdir dir="${test.output}" />
    <mkdir dir="${test.output.raw}" />
  </target>

  <!---->
  <target name="tests-compile" depends="build-common-project,test-prepare" >
    <copy includeemptydirs="false"
          todir="${test.build.dir}" overwrite="true">
      <fileset dir="${eclipse.proj.dir.tests}/src">
        <exclude name="**/*.launch" />
        <exclude name="**/*.java" />
      </fileset>
      <fileset dir="${eclipse.proj.dir.tools}/src">
    	<exclude name="**/*.launch" />
    	<exclude name="**/*.java" />
      </fileset>
    </copy>
    <javac destdir="${test.build.dir}"
           debug="true"
           debuglevel="lines,source"
           includeantruntime="false">
      <src path="${eclipse.proj.dir.tests}/src" />
      <src path="${eclipse.proj.dir.tools}/src" />
      <include name="**/tools/utils/*.java" />
      <include name="**/test/reports/**/*.java" />
      <include name="**/Test*.java" />
      <exclude name="**/presenters/**" />
      <exclude name="**/TestingDispatcher.java" />
     <classpath>
        <pathelement location="${eclipse.proj.dir.common}/output" />
        <pathelement location="${eclipse.proj.dir.common}/lib/client" />
        <pathelement location="${req.jars.dir}" />
      </classpath>
      <classpath refid="biobank.common.build.classpath" />
    </javac>
  </target>

  <fileset id="testcase.files" dir="${eclipse.proj.dir.tests}/src">
    <exclude name="**/speed/**" />
    <exclude name="**/TestReportsProcedurallyGeneratedData.java" />
    <exclude name="**/TestAction.java" />
    <exclude name="**/TestCommon.java" />
    <exclude name="**/TestingDispatcher.java" />
    <exclude name="**/TestHibernateLocking.java" />
    <exclude name="**/TestDatabase.java" />
    <exclude name="**/TestFunctionalities.java" />
    <exclude name="**/TestReportsOnExistingData.java" />
    <exclude name="**/AllTests.java" />
    <exclude name="**/wrappers/**" />
    <exclude name="**/presenters/**" />
    <include name="**/Test*.java" />
  </fileset>

  <!-- target name="test-debug">
    <pathconvert pathsep="${line.separator}" property="sounds" refid="testcase.files"/>
    <echo file="sounds.txt">${sounds}</echo>
  </target -->

  <target name="test" depends="clean-test-results,tests-compile" description="executes test cases">
    <junit printsummary="yes" haltonfailure="no" showoutput="yes" fork="true">
      <classpath refid="test.class.path" />
      <classpath refid="biobank.common.run.classpath" />
      <sysproperty key="server" value="http://localhost:8080" />
      <formatter usefile="yes" type="xml" />
      <test name="${testcase}" todir="${test.output.raw}" if="testcase" />
      <batchtest todir="${test.output.raw}" unless="testcase">
        <fileset refid="testcase.files" />
      </batchtest>
    </junit>
    <junitreport todir="${test.output}">
      <fileset dir="${test.output.raw}">
        <include name="TEST-*.xml" />
      </fileset>
      <report format="noframes" todir="${test.output}/html" />
    </junitreport>
    <echo message="test report: file://${test.output}/html/junit-noframes.html" />
  </target>

  <property name="emma.dir" value="${req.jars.dir}" />
  <path id="emma.lib">
    <pathelement location="${emma.dir}/emma.jar" />
    <pathelement location="${emma.dir}/emma_ant.jar" />
  </path>

  <target name="emma"
          description="turns on EMMA's on-the-fly instrumentation mode">
    <property name="emma.enabled" value="true" />
  </target>

  <target name="test-emma"
          depends="tests-compile"
          description="executes test cases with code coverage">
    <delete file="${test.output}/coverage.emma" />
    <junit printsummary="yes" haltonfailure="no" showoutput="yes" fork="true">
      <classpath refid="biobank.common.run.classpath" />
      <classpath refid="test.class.path" />
      <classpath refid="emma.lib" />
      <formatter usefile="yes" type="brief" />
      <formatter type="xml" />
      <test name="${testcase}" todir="${test.output.raw}" if="testcase" />
      <batchtest todir="testing/raw" unless="testcase">
        <fileset refid="testcase.files" />
      </batchtest>
      <jvmarg value="-Xbootclasspath/a:${emma.dir}/emma.jar" />
      <jvmarg value="emmarun" />
      <jvmarg value="-out" />
      <jvmarg value="${test.output}/coverage.emma" />
      <jvmarg value="-raw" />
      <jvmarg value="-merge" />
      <jvmarg value="yes" />
      <jvmarg value="-ix" />
      <jvmarg value="edu.ualberta.med.biobank.common*" />
    </junit>
    <junitreport todir="${test.output}">
      <fileset dir="${test.output.raw}">
        <include name="TEST-*.xml" />
      </fileset>
      <report format="noframes" todir="${test.output}/html" />
    </junitreport>
    <java classname="emma" fork="true" failonerror="true">
      <arg value="report" />
      <arg value="-r" />
      <arg value="html" />
      <arg value="-sp" />
      <arg value="eclipse_ws/biobank.common/src" />
      <arg value="-in" />
      <arg value="testing/coverage.emma" />
      <classpath>
        <pathelement path="${emma.dir}/emma.jar" />
      </classpath>
    </java>
    <echo message="test report: file://${test.output}/html/junit-noframes.html" />
    <echo message="coverage report: file://${converage.output}/index.html" />
  </target>


  <target name="eclipse.home.env">
    <fail unless="env.ECLIPSE_HOME"
          message="ECLIPSE_HOME environment variable not defined. It should define a path to an eclipse installation containing the Delta Pack." />
  </target>


  <target name="clean-product">
    <delete dir="${buildDirectory}" />
  </target>


  <target name="product" depends="clean-product,biobank-version-modify,eclipse.home.env,deploy" description="build the product">
    <!-- buildDirectory is the folder where the plugins and products are found and build -->
    <!-- plugins and features are copied into the buildDirectory -->
    <copy todir="${buildDirectory}/plugins/biobank2">
      <fileset dir="${eclipse.workspace.dir}/biobank2" />
    </copy>
    <!-- TODO : copy all project containing .nl1. into the plugins folder -->
    <copy todir="${buildDirectory}/plugins/biobank.nl1.fr_CA">
      <fileset dir="${eclipse.workspace.dir}/biobank.nl1.fr_CA" />
    </copy>
    <copy todir="${buildDirectory}/plugins/scannerConfig">
      <fileset dir="${eclipse.workspace.dir}/scannerConfig" />
    </copy>
    <copy todir="${buildDirectory}/plugins/biobank.common">
      <fileset dir="${eclipse.workspace.dir}/biobank.common" />
    </copy>
    <copy todir="${buildDirectory}/plugins/sampleProcessingRobot">
      <fileset dir="${eclipse.workspace.dir}/sampleProcessingRobot" />
    </copy>
    <copy todir="${buildDirectory}/plugins/labelPrinter">
      <fileset dir="${eclipse.workspace.dir}/labelPrinter" />
    </copy>
    <copy todir="${buildDirectory}/plugins/biobank.gui.common">
      <fileset dir="${eclipse.workspace.dir}/biobank.gui.common" />
    </copy>
    <copy todir="${buildDirectory}/plugins/biobank.mvp">
      <fileset dir="${eclipse.workspace.dir}/biobank.mvp" />
    </copy>
    <copy todir="${buildDirectory}/features/biobank2.feature.core">
      <fileset dir="${eclipse.workspace.dir}/biobank2.feature.core" />
    </copy>
    <copy todir="${buildDirectory}/features/biobank2.feature.platform">
      <fileset dir="${eclipse.workspace.dir}/biobank2.feature.platform" />
    </copy>
    <!-- get current org.eclipse.equinox.launcher jar. If find more than one, will use the last one in the list (should be the last version)-->
    <fileset id="launcher.id.all"
             dir="${env.ECLIPSE_HOME}/plugins/"
             includes="org.eclipse.equinox.launcher_*.jar" />
    <last id="launcher.id" count="1">
      <fileset refid="launcher.id.all" />
    </last>
    <!-- get current org.eclipse.pde.build folder. If find more than one, will use the last one in the list (should be the last version) -->
    <fileset id="pde.build.id.all"
             dir="${env.ECLIPSE_HOME}/plugins/"
             includes="org.eclipse.pde.build_*/scripts/productBuild/productBuild.xml" />
    <last id="pde.build.id" count="1">
      <fileset refid="pde.build.id.all" />
    </last>
    <!-- launch product creation -->
    <java classpath="${toString:launcher.id}"
          classname="org.eclipse.equinox.launcher.Main"
          failonerror="true"
          fork="true">
      <arg line="-application org.eclipse.ant.core.antRunner" />
      <arg line="-buildfile ${toString:pde.build.id}" />
      <arg line="-Dbuilder=${product.dir}" />
      <!-- product.dir is used in product/customTarget.xml -->
      <arg line="-Dproduct.dir=${product.dir}" />
      <!-- instead of fixed paths in product/build.properties: -->
      <arg line="-Dproduct=${eclipse.proj.dir}/biobank2.product" />
      <arg line="-DbuildDirectory=${product.dir}/buildDirectory" />
      <arg line="-DbaseLocation=${env.ECLIPSE_HOME}" />
      <arg line="-Djava.client.version.num=${java.client.version.num}" />

      <!-- uncomment line below to build a single executable product -->
      <!-- arg line="-Dconfigs='win32, win32, x86'" / -->
      <!-- arg line="-Dconfigs='linux, gtk, x86_64'" / -->
    </java>
    <antcall target="updateSiteMetadata" />
  </target>


  <target name="updateSiteMetadata" depends="eclipse.home.env" description="Build the update site folder">
    <property name="buildDirectory" value="${product.dir}/buildDirectory" />
    <property name="updateSiteFolder" value="${buildDirectory}/updateSite" />
    <copy todir="${updateSiteFolder}/features/">
      <fileset dir="${buildDirectory}/buildRepo/features/" />
    </copy>
    <copy todir="${updateSiteFolder}/plugins/">
      <fileset dir="${buildDirectory}/buildRepo/plugins/" />
    </copy>
    <fileset id="featureJar.id"
             dir="${updateSiteFolder}/features/"
             includes="biobank2.feature.core_*.jar" />
    <property name="featureJar" refid="featureJar.id" />
    <taskdef resource="net/sf/antcontrib/antcontrib.properties">
      <classpath>
        <pathelement location="${product.dir}/ant-contrib/ant-contrib-1.0b3.jar" />
      </classpath>
    </taskdef>
    <propertyregex property="featureVersion"
                   input="${featureJar}"
                   regexp="biobank2.feature.core_(.*)\.jar"
                   select="\1"
                   casesensitive="true" />
    <copy file="${product.dir}/site.xml"
          tofile="${updateSiteFolder}/site.xml" />
    <replace file="${updateSiteFolder}/site.xml"
             token="@VERSION@"
             value="${featureVersion}" />


    <!-- get current org.eclipse.equinox.launcher jar. If find more than one, will use the last one in the list (should be the last version)-->
    <fileset id="launcher.id.all"
             dir="${env.ECLIPSE_HOME}/plugins/"
             includes="org.eclipse.equinox.launcher_*.jar" />
    <last id="launcher.id" count="1">
      <fileset refid="launcher.id.all" />
    </last>
    <java classpath="${toString:launcher.id}"
          classname="org.eclipse.equinox.launcher.Main"
          failonerror="true"
          fork="true">
      <arg line="-application org.eclipse.equinox.p2.publisher.UpdateSitePublisher" />
      <arg line="-source ${updateSiteFolder}" />
      <arg line="-compress" />
      <arg line="-publishArtifacts" />
      <arg line="-consoleLog" />
      <arg line="-artifactRepository file:${updateSiteFolder}" />
      <arg line="-metadataRepository file:${updateSiteFolder}" />
    </java>
  </target>

  <target name="doxygen" description="generates documentation for the model classes">
    <exec executable="${doxygen}">
      <arg value="docs/doxygen/doxygen.cfg" />
    </exec>
    <echo message="point your browser to: file://${doxygen.output}/html/index.html" />
    <exec executable="${xsltproc}" dir="docs/doxygen/xml" output="docs/doxygen/xml/all.xml">
      <arg value="combine.xslt" />
      <arg value="index.xml" />
    </exec>
  </target>

  <target name="clean-doxygen">
    <delete dir="docs/doxygen/html" />
    <delete dir="docs/doxygen/xml" />
  </target>

<!-- (setq nxml-slash-auto-complete-flag t) -->


</project>
