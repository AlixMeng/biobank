<?xml version="1.0" encoding="utf-8"?>
<!--

Overall build file
use command "ant -projecthelp" to display the targets.

-->
<project name="biobank" basedir="." default="deploy" xmlns:ivy="antlib:org.apache.ivy.ant">
  <exec executable="hostname" outputproperty="host.name">
    <arg value="-f" />
  </exec>

  <property environment="env" />
  <property name="doxygen" location="/usr/bin/doxygen" />
  <property name="xsltproc" location="/usr/bin/xsltproc" />

  <!-- TODO: move as many properties as possible into build.properties -->
  <!-- TODO: add tasks to push database properties to various files -->
  <!-- TODO: create a cacore directory with all the cacore stuff in it
       that we can throw into the war file and use to create the database -->
  <property file="build.properties" />
  <property file="db.properties" />

  <!-- must use a property with a LOCATION attribute because it is converted
       to be an absolute value, which the product builder seems to require in
       order to load its build.properties in product/build.properties -->
  <property name="product.dir" location="product" />
  <property name="buildDirectory" value="${product.dir}/buildDirectory" />

  <path id="ivy.lib.path">
    <fileset dir="/usr/share/java" includes="ivy.jar"/>
  </path>

  <taskdef resource="org/apache/ivy/ant/antlib.xml"
	   uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>

  <import file="build-db.xml"/>
  <import file="build-i18n.xml"/>
  <import file="build-eclipse.xml"/>
  <import file="build-tests.xml"/>

  <condition property="databse.exec.haveUserAndPassword">
    <and>
      <isset property="database.exec.username" />
      <isset property="database.exec.password" />
    </and>
  </condition>

  <condition property="perl" value="perl" else="/usr/bin/perl">
    <os family="windows" />
  </condition>
  <condition property="debugFileExtension" value="-debug" else="">
    <equals arg1="${debug}" arg2="true" casesensitive="false" trim="true" />
  </condition>

  <fileset id="biobank.common.server.build.classpath" dir="${eclipse.proj.dir.common}/lib/server">
    <include name="csmapi.jar" />
    <include name="jta.jar" />
    <include name="sdk-core.jar" />
    <include name="sdk-writable-core.jar" />
    <include name="supercsv.jar" />
    <include name="spiffy-all.jar" />
  </fileset>

  <fileset id="biobank.common.client.build.classpath" dir="${eclipse.proj.dir.common}/lib/client">
    <include name="acegi-security.jar" />
    <include name="antlr.jar" />
    <include name="asm.jar" />
    <include name="axis.jar" />
    <include name="caGrid-CQL-cql.jar" />
    <include name="castor.jar" />
    <include name="cglib.jar" />
    <include name="cog-jglobus.jar" />
    <include name="commons-codec.jar" />
    <include name="commons-collections.jar" />
    <include name="commons-collections.jar" />
    <include name="commons-discovery.jar" />
    <include name="commons-lang.jar" />
    <include name="commons-logging.jar" />
    <include name="dom4j.jar" />
    <include name="gettext-commons.jar" />
    <include name="hibernate-jpa-2.0-api.jar" />
    <include name="hibernate-validator.jar" />
    <include name="hibernate-core.jar" />
    <include name="hibernate-envers.jar" />
    <include name="javassist.jar" />
    <include name="jaxrpc.jar" />
    <include name="jta.jar" />
    <include name="log4j.jar" />
    <include name="messages.jar" />
    <include name="mysql-connector-java.jar" />
    <include name="ognl.jar" />
    <include name="saaj.jar" />
    <include name="sdk-client-framework.jar" />
    <include name="sdk-grid-remoting.jar" />
    <include name="sdk-security.jar" />
    <include name="sdk-writable-client-framework.jar" />
    <include name="slf4j-api.jar" />
    <include name="slf4j-log4j12.jar" />
    <include name="spring.jar" />
    <include name="validation-api.jar" />
    <include name="wsdl4j.jar" />
    <include name="xercesImpl.jar" />
    <include name="xpp3.jar" />
    <include name="xstream.jar" />
    <include name="jsse.jar" />
    <include name="hibernate-commons-annotations.jar"/>
    <include name="hibernate-ehcache.jar"/>
    <include name="ehcache.jar"/>
    <include name="jdom.jar"/>
  </fileset>

  <path id="biobank.common.build.classpath">
    <fileset refid="biobank.common.server.build.classpath" />
    <fileset refid="biobank.common.client.build.classpath" />
  </path>

  <!-- for tests -->
  <path id="biobank.common.run.classpath">
    <fileset refid="biobank.common.server.build.classpath" />
    <fileset refid="biobank.common.client.build.classpath" />
    <pathelement location="${eclipse.proj.dir.common}/output" />
  </path>

  <target name="check-dependencies-uptodate">
    <uptodate property="dependencies.uptodate">
      <srcfiles dir="." includes="ivy.xml"/>
      <mapper type="merge" to="${lib.dir}/.dependencies.resolved"/>
    </uptodate>
  </target>

  <target name="resolve" depends="check-dependencies-uptodate" unless="dependencies.uptodate"
	  description="--> retrieve dependencies with ivy">
    <ivy:retrieve pattern="lib/build/[artifact].[ext]" conf="biobank.build"  type="jar" />
    <ivy:retrieve pattern="lib/[conf]/[artifact].[ext]"
		  conf="hibernatetool,biobank.webapp"  type="jar" />

    <ivy:retrieve pattern="eclipse_ws/biobank.common/lib/client/[artifact].[ext]" conf="biobank.common.client" type="jar" />
    <ivy:retrieve pattern="eclipse_ws/biobank.common/lib/client/[artifact]-[type].[ext]" conf="biobank.common.client" type="source" />

    <ivy:retrieve pattern="eclipse_ws/biobank.common/lib/server/[artifact].[ext]" conf="biobank.common.server" type="jar" />
    <ivy:retrieve pattern="eclipse_ws/biobank.common/lib/server/[artifact]-[type].[ext]" conf="biobank.common.server" type="source" />

    <ivy:retrieve pattern="eclipse_ws/[conf]/lib/[artifact].[ext]"
		  conf="biobank.gui.common,biobank.mvp,biobank2,biobank2.tools,biobank2.tests"
		  type="jar" />

    <ivy:retrieve pattern="eclipse_ws/[conf]/lib/[artifact]-[type].[ext]"
		  conf="biobank.gui.common,biobank.mvp,biobank2,biobank2.tools,biobank2.tests"
		  type="source" />
    <touch file="${lib.dir}/.dependencies.resolved" />
  </target>

  <target name="report" depends="resolve" description="--> generates a report of dependencies">
    <ivy:report todir="${output.dir}"
		conf="biobank.common.client,biobank.common.server,biobank.gui.common,biobank.mvp,biobank2,biobank2.tools,biobank2.tests" />
  </target>

  <target name="clean-cache" description="--> cleans the ivy cache">
    <ivy:cleancache />
  </target>

  <target name="deploy-eclipse" depends="resolve,messages-jar"
	  description="--> retrieve dependencies for eclipse projects">
    <copy file="${lib.dir}/messages.jar" todir="${eclipse.proj.dir}/lib" overwrite="true"/>
    <copy file="${lib.dir}/messages.jar" todir="${eclipse.proj.dir.common}/lib/client" overwrite="true"/>

    <!-- File needed in the test project to call csm api methods -->
    <copy file="sdk_conf/biobank.csm.new.hibernate.cfg.xml" todir="${eclipse.proj.dir.tests}/src" overwrite="false" />
  </target>

  <target name="get-db-executor" unless="databse.exec.haveUserAndPassword">
    <input message="Enter database executor's username (to execute database commands)"
           addProperty="database.exec.username"
           defaultValue="root" />
    <input message="Enter password"
           addProperty="database.exec.password"
           defaultValue="">
      <handler type="secure" />
    </input>
  </target>

  <target name="check-db-user"
          depends="check-db">
  </target>

  <target name="check-db"
          depends="get-db-executor">
  </target>

  <!-- JBoss -->
  <target name="check-jboss-uptodate">
    <!-- remove the upt.war because it requires db name/url/username/pw variables
         inside the war -->
    <delete includeemptydirs="true">
      <fileset dir="${env.JBOSS_HOME}/server/default/deploy">
        <include name="upt*.war"/>
      </fileset>
    </delete>
    <uptodate property="jboss.uptodate"
              targetfile="${env.JBOSS_HOME}/server/default/deploy/biobank.war">
      <srcfiles file="${war.file}" />
      <srcfiles file="db.properties" />
    </uptodate>
  </target>

  <target name="keystore-gen">
    <hostinfo prefix="local" />

    <echo message="Helping you to generate a TEMPORARY THROW-AWAY TEST key..." />
    <input message="Enter CN:"
           addproperty="dName.CN"
           defaultValue="localhost" />
    <input message="Enter subjectAltName:"
           addproperty="subjectAltName"
           defaultValue="IP:${local.ADDR4},DNS:localhost" />
    <input message="Enter an alias:"
           addproperty="keystore.alias"
           defaultValue="${dName.CN}" />

    <copy file="scripts/ssl/cert.cnf.template"
          tofile="scripts/ssl/cert.cnf" overwrite="true" />
    <replace file="scripts/ssl/cert.cnf">
      <replacefilter token="@@dName.CN@@" value="${dName.CN}" />
      <replacefilter token="@@subjectAltName@@" value="${subjectAltName}" />
    </replace>

    <exec executable="openssl" dir="scripts/ssl">
      <arg line="req -newkey rsa:1024 -x509 -outform DER -out cert.der -days 3650 -config cert.cnf" />
    </exec>
    <exec executable="openssl" dir="scripts/ssl">
      <arg line="pkcs8 -topk8 -nocrypt -in key.pem -inform PEM -out key.der -outform DER" />
    </exec>
    <exec executable="java" dir="scripts/ssl">
      <arg line="-Dkeystore=biobank.keystore ImportKey key.der cert.der ${keystore.alias}" />
    </exec>
    <exec executable="keytool" dir="scripts/ssl">
      <arg line="-keystore biobank.keystore -alias ${keystore.alias} -storepass importkey -keypasswd -keypass importkey -new biobank2" />
    </exec>
    <exec executable="keytool" dir="scripts/ssl">
      <arg line="-keystore biobank.keystore -storepasswd -storepass importkey -new biobank2" />
    </exec>
    <copy file="scripts/ssl/biobank.keystore"
          tofile="${secu-log.dir}/jboss/biobank.keystore"  overwrite="true" />
  </target>

  <target name="keystore-check">
    <available file="${secu-log.dir}/jboss/biobank.keystore" property="keystore.available" />
  </target>

  <target name="keystore-copy" depends="keystore-check">
    <fail unless="keystore.available"
          message="${secu-log.dir}/jboss/biobank.keystore not found. Use target 'keystore-gen' to generate a temporary key or create your own manually." />
    <copy file="${secu-log.dir}/jboss/biobank.keystore"
          tofile="${env.JBOSS_HOME}/server/default/conf/biobank.keystore"
          overwrite="true" />
  </target>

  <!-- version number on server side -->
  <target name="server-manifest">
    <manifest file="${eclipse.proj.dir.common}/META-INF/MANIFEST.MF"
              mode="update">
      <attribute name="Bundle-Version" value="${server.version.num}" />
    </manifest>
    <fixcrlf srcdir="${eclipse.proj.dir.common}/META-INF"
             eol="lf"
             eof="asis">
      <include name="**/*.MF" />
    </fixcrlf>
    <propertyfile file="${eclipse.proj.dir.common}/src/edu/ualberta/med/biobank/server/applicationservice/version.properties">
      <entry key="server.version" value="${server.version.num}" />
    </propertyfile>
  </target>

  <target name="update-db-config"
          description="copies db configuration information from db.properties to various config files">
    <copy todir="${secu-log.dir}/jboss" overwrite="true">
      <fileset dir="${secu-log.dir}/jboss"/>
      <globmapper from="*.template" to="*"/>
      <filterset>
        <filter token="database.url" value="${database.url}"/>
        <filter token="database.driver" value="${database.driver}"/>
        <filter token="database.username" value="${database.username}"/>
        <filter token="database.password" value="${database.password}"/>
      </filterset>
    </copy>
    <move file="${secu-log.dir}/jboss/biobank.csm.new.hibernate.cfg.xml"
          tofile="webapp/WEB-INF/classes/biobank.csm.new.hibernate.cfg.xml"
	  overwrite="true" />
    <move file="${secu-log.dir}/jboss/log4j.xml"
          tofile="webapp/WEB-INF/classes/log4j.xml"
	  overwrite="true" />
  </target>

  <target name="check-db-properties">
    <available file="db.properties" property="db.properties.available" />
  </target>

  <target name="db-properties-copy" depends="check-db-properties">
    <fail unless="db.properties.available"
          message="File 'db.properties' not found in project's root directory. Copy 'db.properties.template' to 'db.properties' and modify accordingly." />
    <copy file="db.properties.template"
          tofile="db.properties"
          overwrite="false" />
  </target>

  <target name="check-deploy-jboss"
	  depends="db-properties-copy,check-db-user">
    <echo message="to skip this check set the check.deploy.jboss.skip property on the command line" />
    <exec dir="" executable="${perl}" failonerror="true">
      <arg line="scripts/chkconfig -d ${database.name} --host ${database.host} -u ${database.exec.username} -p ${database.exec.password}"/>
    </exec>
  </target>


  <target name="check-deploy-jboss-required"
	  unless="check.deploy.jboss.skip">
    <antcall target="check-deploy-jboss" />
  </target>

  <target name="deploy-jboss"
          depends="check-deploy-jboss-required,update-db-config,package-webapp,check-jboss-uptodate,keystore-copy"
          description="deploys the caCORE SDK webapp to JBoss"
          unless="jboss.uptodate">
    <copy file="${secu-log.dir}/jboss/login-config.xml"
          tofile="${env.JBOSS_HOME}/server/default/conf/login-config.xml"
          overwrite="true" verbose="true" />
    <copy file="${secu-log.dir}/jboss/server${debugFileExtension}.xml"
          tofile="${env.JBOSS_HOME}/server/default/deploy/jbossweb-tomcat55.sar/server.xml"
          overwrite="true" verbose="true" />
    <!-- for compatibility: this file has been split -->
    <delete file="${env.JBOSS_HOME}/server/default/deploy/mysql-ds.xml" />
    <copy file="${lib.dir}/build/mysql-connector-java.jar"
          tofile="${env.JBOSS_HOME}/server/default/lib/mysql-connector-java.jar"
          overwrite="true" verbose="true" />
    <copy file="${secu-log.dir}/jboss/upt-ds.xml"
          tofile="${env.JBOSS_HOME}/server/default/deploy/upt-ds.xml"
          overwrite="true" verbose="true" />
    <copy file="${secu-log.dir}/jboss/biobank-ds.xml"
          tofile="${env.JBOSS_HOME}/server/default/deploy/biobank-ds.xml"
          overwrite="true" verbose="true" />
    <!-- ignore this war for now
	 <copy file="${secu-log.dir}/jboss/upt.war"
         tofile="${env.JBOSS_HOME}/server/default/deploy/upt.war"
         overwrite="true" verbose="true" />
    -->
    <delete includeemptydirs="true">
      <fileset dir="${env.JBOSS_HOME}/server/default/deploy">
        <include name="upt*.war"/>
      </fileset>
    </delete>
    <copy file="${war.file}"
          tofile="${env.JBOSS_HOME}/server/default/deploy/biobank.war"
          overwrite="true" verbose="true"/>
  </target>

  <target name="build-eclipse-projects"
	  description="builds the Biobank client Eipse projects">
    <antcall target="eclipse-projects" />
  </target>

  <target name="deploy" description="deploys to JBoss and Eclipse project"
	  depends="deploy-eclipse,deploy-jboss">
  </target>

  <target name="build-common-project"
          depends="resolve,messages-jar,server-manifest">
    <copy file="${lib.dir}/messages.jar" todir="${eclipse.proj.dir.common}/lib/client" overwrite="true"/>
    <mkdir dir="${eclipse.proj.dir.common}/output" />
    <copy includeemptydirs="false" todir="${eclipse.proj.dir.common}/output" overwrite="false">
      <fileset dir="${eclipse.proj.dir.common}/src">
        <exclude name="**/*.launch" />
        <exclude name="**/*.java" />
      </fileset>
    </copy>
    <javac debug="true"
           debuglevel="source,lines,vars"
           srcdir="${eclipse.proj.dir.common}/src"
           destdir="${eclipse.proj.dir.common}/output"
           source="1.6"
           target="1.6"
           includeantruntime="false">
      <classpath refid="biobank.common.build.classpath" />
    </javac>
  </target>

  <target name="package-webapp" depends="build-common-project">
    <mkdir dir="${output.dir}" />
    <war destfile="${war.file}"
         webxml="webapp/WEB-INF/web.xml">
      <manifest>
        <attribute name="Version" value="${server.version.num}" />
      </manifest>
      <!-- TODO: could put things in right folders (e.g. biobank.common), but for now
           just use an explicit list of what needs to be in the war -->
      <lib dir="${req.jars.dir}">
        <include name="messages.jar" />
      </lib>
      <lib dir="${req.jars.dir}/biobank.webapp">
        <include name="*.jar" />
      </lib>
      <fileset dir="webapp">
        <exclude name="**/WEB-INF/**" />
      </fileset>
      <classes dir="${eclipse.proj.dir.common}/output">
        <exclude name="**/client/**" />
      </classes>
      <webinf dir="webapp/WEB-INF">
        <include name="**/*" />
	<exclude name="**/web.xml" />
      </webinf>
    </war>
  </target>

  <target name="clean"
          depends="clean-tests,clean-jars,clean-product,clean-doxygen"
          description="cleans project output, tests, and jars">
    <delete dir="${eclipse.proj.dir.common}/output" />
    <delete dir="${eclipse.proj.dir.tools}/output" />
    <delete dir="${lib.dir}/biobank.webapp" />
    <delete dir="${lib.dir}/hibernatetool" />
    <delete dir="${lib.dir}/build" />
    <antcall target="clean-eclipse-projects" />
  </target>

  <property name="doxygen.output" location="docs/doxygen" />


  <target name="clean-product">
    <delete dir="${buildDirectory}" />
  </target>

  <target name="product"
	  depends="clean-product,biobank-version-modify,deploy"
	  description="build the product">
    <!-- buildDirectory is the folder where the plugins and products are found and build -->
    <!-- plugins and features are copied into the buildDirectory -->
    <echo message="here2" />
    <copy todir="${buildDirectory}/plugins/biobank2" verbose="true">
      <fileset dir="${eclipse.workspace.dir}/biobank2"/>
    </copy>
    <!-- TODO : copy all project containing .nl1. into the plugins folder -->
    <copy todir="${buildDirectory}/plugins/biobank.nl1.fr_CA">
      <fileset dir="${eclipse.workspace.dir}/biobank.nl1.fr_CA" />
    </copy>
    <copy todir="${buildDirectory}/plugins/scannerConfig">
      <fileset dir="${eclipse.workspace.dir}/scannerConfig" />
    </copy>
    <copy todir="${buildDirectory}/plugins/biobank.common">
      <fileset dir="${eclipse.workspace.dir}/biobank.common" />
    </copy>
    <copy todir="${buildDirectory}/plugins/labelPrinter">
      <fileset dir="${eclipse.workspace.dir}/labelPrinter" />
    </copy>
    <copy todir="${buildDirectory}/plugins/biobank.gui.common">
      <fileset dir="${eclipse.workspace.dir}/biobank.gui.common" />
    </copy>
    <copy todir="${buildDirectory}/plugins/biobank.mvp">
      <fileset dir="${eclipse.workspace.dir}/biobank.mvp" />
    </copy>
    <copy todir="${buildDirectory}/features/biobank2.feature.core">
      <fileset dir="${eclipse.workspace.dir}/biobank2.feature.core" />
    </copy>
    <copy todir="${buildDirectory}/features/biobank2.feature.platform">
      <fileset dir="${eclipse.workspace.dir}/biobank2.feature.platform" />
    </copy>
    <!-- get current org.eclipse.equinox.launcher jar. If find more than one, will use the last one in the list (should be the last version)-->
    <fileset id="launcher.id.all"
             dir="${env.ECLIPSE_HOME}/plugins/"
             includes="org.eclipse.equinox.launcher_*.jar" />
    <last id="launcher.id" count="1">
      <fileset refid="launcher.id.all" />
    </last>
    <!-- get current org.eclipse.pde.build folder. If find more than one, will use the last one in the list (should be the last version) -->
    <fileset id="pde.build.id.all"
             dir="${env.ECLIPSE_HOME}/plugins/"
             includes="org.eclipse.pde.build_*/scripts/productBuild/productBuild.xml" />
    <last id="pde.build.id" count="1">
      <fileset refid="pde.build.id.all" />
    </last>
    <!-- launch product creation -->
    <java classpath="${toString:launcher.id}"
          classname="org.eclipse.equinox.launcher.Main"
          failonerror="true"
          fork="true">
      <arg line="-application org.eclipse.ant.core.antRunner" />
      <arg line="-buildfile ${toString:pde.build.id}" />
      <arg line="-Dbuilder=${product.dir}" />
      <!-- product.dir is used in product/customTarget.xml -->
      <arg line="-Dproduct.dir=${product.dir}" />
      <!-- instead of fixed paths in product/build.properties: -->
      <arg line="-Dproduct=${eclipse.proj.dir}/biobank2.product" />
      <arg line="-DbuildDirectory=${product.dir}/buildDirectory" />
      <arg line="-DbaseLocation=${env.ECLIPSE_HOME}" />
      <arg line="-Djava.client.version.num=${java.client.version.num}" />

      <!-- uncomment line below to build a single executable product -->
      <!-- arg line="-Dconfigs='win32, win32, x86'" / -->
      <!-- arg line="-Dconfigs='linux, gtk, x86_64'" / -->
    </java>
    <antcall target="updateSiteMetadata" />
  </target>


  <target name="updateSiteMetadata"
	  description="Build the update site folder">
    <property name="buildDirectory" value="${product.dir}/buildDirectory" />
    <property name="updateSiteFolder" value="${buildDirectory}/updateSite" />
    <copy todir="${updateSiteFolder}/features/">
      <fileset dir="${buildDirectory}/buildRepo/features/" />
    </copy>
    <copy todir="${updateSiteFolder}/plugins/">
      <fileset dir="${buildDirectory}/buildRepo/plugins/" />
    </copy>
    <fileset id="featureJar.id"
             dir="${updateSiteFolder}/features/"
             includes="biobank2.feature.core_*.jar" />
    <property name="featureJar" refid="featureJar.id" />
    <taskdef resource="net/sf/antcontrib/antcontrib.properties">
      <classpath>
        <pathelement location="${product.dir}/ant-contrib/ant-contrib-1.0b3.jar" />
      </classpath>
    </taskdef>
    <propertyregex property="featureVersion"
                   input="${featureJar}"
                   regexp="biobank2.feature.core_(.*)\.jar"
                   select="\1"
                   casesensitive="true" />
    <copy file="${product.dir}/site.xml"
          tofile="${updateSiteFolder}/site.xml" />
    <replace file="${updateSiteFolder}/site.xml"
             token="@VERSION@"
             value="${featureVersion}" />


    <!-- get current org.eclipse.equinox.launcher jar. If find more than one, will use the last one in the list (should be the last version)-->
    <fileset id="launcher.id.all"
             dir="${env.ECLIPSE_HOME}/plugins/"
             includes="org.eclipse.equinox.launcher_*.jar" />
    <last id="launcher.id" count="1">
      <fileset refid="launcher.id.all" />
    </last>
    <java classpath="${toString:launcher.id}"
          classname="org.eclipse.equinox.launcher.Main"
          failonerror="true"
          fork="true">
      <arg line="-application org.eclipse.equinox.p2.publisher.UpdateSitePublisher" />
      <arg line="-source ${updateSiteFolder}" />
      <arg line="-compress" />
      <arg line="-publishArtifacts" />
      <arg line="-consoleLog" />
      <arg line="-artifactRepository file:${updateSiteFolder}" />
      <arg line="-metadataRepository file:${updateSiteFolder}" />
    </java>
  </target>

  <target name="doxygen" description="generates documentation for the model classes">
    <exec executable="${doxygen}">
      <arg value="docs/doxygen/doxygen.cfg" />
    </exec>
    <echo message="point your browser to: file://${doxygen.output}/html/index.html" />
    <exec executable="${xsltproc}" dir="docs/doxygen/xml" output="docs/doxygen/xml/all.xml">
      <arg value="combine.xslt" />
      <arg value="index.xml" />
    </exec>
  </target>

  <target name="clean-doxygen">
    <delete dir="docs/doxygen/html" />
    <delete dir="docs/doxygen/xml" />
  </target>
</project>

<!--
    Local Variables:
    compile-command: "ant"
    End:
-->
